services:
  postgres:
    image: postgres:15-alpine
    container_name: school-platform-prod-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - school-platform-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: school-platform-prod-backend
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - school-platform-prod-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    container_name: school-platform-prod-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - VITE_BACKEND_URL=http://backend:3000
    depends_on:
      - backend
    networks:
      - school-platform-prod-network

volumes:
  postgres_prod_data:
    driver: local

networks:
  school-platform-prod-network:
    driver: bridge

import pandas as pd
import numpy as np
import os
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import re
from datetime import datetime
import json
import sys
import argparse


class GradeClassProcessor:
    def __init__(self, year_class_filter=None):
        self.input_file = "2025年09月23日-2025年09月24日 成绩_含学号.xlsx"
        self.output_dir = r"25年9月体测成绩得分等级汇总"
        self.today = datetime.now().strftime("%Y/%m/%d")

        # 年级班级过滤参数: { year: ["1班", "2班", ...], year2: ["class",...] }
        self.year_class_filter = year_class_filter or {}

        # 验证过滤参数格式
        if self.year_class_filter:
            self.validate_year_class_filter()

        # 国家标准评分系统
        self.setup_national_standards()

    def validate_year_class_filter(self):
        """验证年级班级过滤参数的格式"""
        if not isinstance(self.year_class_filter, dict):
            raise ValueError("year_class_filter 必须是字典格式")

        valid_grades = ["一年级", "二年级", "三年级", "四年级", "五年级", "六年级"]

        for year, classes in self.year_class_filter.items():
            if year not in valid_grades:
                raise ValueError(f"无效的年级: {year}。有效年级: {valid_grades}")

            if not isinstance(classes, list):
                raise ValueError(f"年级 {year} 的班级列表必须是列表格式")

            for class_name in classes:
                if not isinstance(class_name, str):
                    raise ValueError(
                        f"年级 {year} 的班级名必须是字符串格式: {class_name}"
                    )

                # 验证班级名格式 (如: "1班", "2班", "10班" 等)
                if not re.match(r"^\d+班$", class_name):
                    raise ValueError(
                        f"年级 {year} 的班级名格式错误，应为数字+班: {class_name}"
                    )

        print(f"✅ 年级班级过滤参数验证通过: {self.year_class_filter}")

    def setup_national_standards(self):
        """设置国家标准评分表和权重"""

        # 根据文档设置各年级权重（标准.md第65-79行）
        self.weights = {
            "一年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.30,
                "跳绳": 0.20,
            },
            "二年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.30,
                "跳绳": 0.20,
            },
            "三年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.20,
                "跳绳": 0.20,
                "仰卧起坐": 0.10,
            },
            "四年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.20,
                "跳绳": 0.20,
                "仰卧起坐": 0.10,
            },
            "五年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.10,
                "跳绳": 0.10,
                "仰卧起坐": 0.20,
                "往返跑": 0.10,
            },
            "六年级": {
                "BMI": 0.15,
                "肺活量": 0.15,
                "50米跑": 0.20,
                "坐位体前屈": 0.10,
                "跳绳": 0.10,
                "仰卧起坐": 0.20,
                "往返跑": 0.10,
            },
        }

        # BMI评分标准（根据标准文档表1-1、1-2）
        self.bmi_standards = {
            "男": {
                "一年级": {
                    "正常": (13.5, 18.1),
                    "低体重": (0, 13.4),
                    "超重": (18.2, 20.3),
                    "肥胖": (20.4, 50),
                },
                "二年级": {
                    "正常": (13.7, 18.4),
                    "低体重": (0, 13.6),
                    "超重": (18.5, 20.4),
                    "肥胖": (20.5, 50),
                },
                "三年级": {
                    "正常": (13.9, 19.4),
                    "低体重": (0, 13.8),
                    "超重": (19.5, 22.1),
                    "肥胖": (22.2, 50),
                },
                "四年级": {
                    "正常": (14.2, 20.1),
                    "低体重": (0, 14.1),
                    "超重": (20.2, 22.6),
                    "肥胖": (22.7, 50),
                },
                "五年级": {
                    "正常": (14.4, 21.4),
                    "低体重": (0, 14.3),
                    "超重": (21.5, 24.1),
                    "肥胖": (24.2, 50),
                },
                "六年级": {
                    "正常": (14.7, 21.8),
                    "低体重": (0, 14.6),
                    "超重": (21.9, 24.5),
                    "肥胖": (24.6, 50),
                },
            },
            "女": {
                "一年级": {
                    "正常": (13.3, 17.3),
                    "低体重": (0, 13.2),
                    "超重": (17.4, 19.2),
                    "肥胖": (19.3, 50),
                },
                "二年级": {
                    "正常": (13.5, 17.8),
                    "低体重": (0, 13.4),
                    "超重": (17.9, 20.2),
                    "肥胖": (20.3, 50),
                },
                "三年级": {
                    "正常": (13.6, 18.6),
                    "低体重": (0, 13.5),
                    "超重": (18.7, 21.1),
                    "肥胖": (21.2, 50),
                },
                "四年级": {
                    "正常": (13.7, 19.4),
                    "低体重": (0, 13.6),
                    "超重": (19.5, 22.0),
                    "肥胖": (22.1, 50),
                },
                "五年级": {
                    "正常": (13.8, 20.5),
                    "低体重": (0, 13.7),
                    "超重": (20.6, 22.9),
                    "肥胖": (23.0, 50),
                },
                "六年级": {
                    "正常": (14.2, 20.8),
                    "低体重": (0, 14.1),
                    "超重": (20.9, 23.6),
                    "肥胖": (23.7, 50),
                },
            },
        }

        # 肺活量评分标准（完全按照标准.md表1-3、1-4）
        self.lung_standards = {
            "男": {
                "一年级": [
                    (1700, 100),
                    (1600, 95),
                    (1500, 90),
                    (1400, 85),
                    (1300, 80),
                    (1240, 78),
                    (1180, 76),
                    (1120, 74),
                    (1060, 72),
                    (1000, 70),
                    (940, 68),
                    (880, 66),
                    (820, 64),
                    (760, 62),
                    (700, 60),
                    (660, 50),
                    (620, 40),
                    (580, 30),
                    (540, 20),
                    (500, 10),
                ],
                "二年级": [
                    (2000, 100),
                    (1900, 95),
                    (1800, 90),
                    (1650, 85),
                    (1500, 80),
                    (1430, 78),
                    (1360, 76),
                    (1290, 74),
                    (1220, 72),
                    (1150, 70),
                    (1080, 68),
                    (1010, 66),
                    (940, 64),
                    (870, 62),
                    (800, 60),
                    (750, 50),
                    (700, 40),
                    (650, 30),
                    (600, 20),
                    (550, 10),
                ],
                "三年级": [
                    (2300, 100),
                    (2200, 95),
                    (2100, 90),
                    (1900, 85),
                    (1700, 80),
                    (1620, 78),
                    (1540, 76),
                    (1460, 74),
                    (1380, 72),
                    (1300, 70),
                    (1220, 68),
                    (1140, 66),
                    (1060, 64),
                    (980, 62),
                    (900, 60),
                    (840, 50),
                    (780, 40),
                    (720, 30),
                    (660, 20),
                    (600, 10),
                ],
                "四年级": [
                    (2600, 100),
                    (2500, 95),
                    (2400, 90),
                    (2150, 85),
                    (1900, 80),
                    (1820, 78),
                    (1740, 76),
                    (1660, 74),
                    (1580, 72),
                    (1500, 70),
                    (1420, 68),
                    (1340, 66),
                    (1260, 64),
                    (1180, 62),
                    (1100, 60),
                    (1030, 50),
                    (960, 40),
                    (890, 30),
                    (820, 20),
                    (750, 10),
                ],
                "五年级": [
                    (2900, 100),
                    (2800, 95),
                    (2700, 90),
                    (2450, 85),
                    (2200, 80),
                    (2110, 78),
                    (2020, 76),
                    (1930, 74),
                    (1840, 72),
                    (1750, 70),
                    (1660, 68),
                    (1570, 66),
                    (1480, 64),
                    (1390, 62),
                    (1300, 60),
                    (1220, 50),
                    (1140, 40),
                    (1060, 30),
                    (980, 20),
                    (900, 10),
                ],
                "六年级": [
                    (3200, 100),
                    (3100, 95),
                    (3000, 90),
                    (2750, 85),
                    (2500, 80),
                    (2400, 78),
                    (2300, 76),
                    (2200, 74),
                    (2100, 72),
                    (2000, 70),
                    (1900, 68),
                    (1800, 66),
                    (1700, 64),
                    (1600, 62),
                    (1500, 60),
                    (1410, 50),
                    (1320, 40),
                    (1230, 30),
                    (1140, 20),
                    (1050, 10),
                ],
            },
            "女": {
                "一年级": [
                    (1400, 100),
                    (1300, 95),
                    (1200, 90),
                    (1100, 85),
                    (1000, 80),
                    (960, 78),
                    (920, 76),
                    (880, 74),
                    (840, 72),
                    (800, 70),
                    (760, 68),
                    (720, 66),
                    (680, 64),
                    (640, 62),
                    (600, 60),
                    (580, 50),
                    (560, 40),
                    (540, 30),
                    (520, 20),
                    (500, 10),
                ],
                "二年级": [
                    (1600, 100),
                    (1500, 95),
                    (1400, 90),
                    (1300, 85),
                    (1200, 80),
                    (1150, 78),
                    (1100, 76),
                    (1050, 74),
                    (1000, 72),
                    (950, 70),
                    (900, 68),
                    (850, 66),
                    (800, 64),
                    (750, 62),
                    (700, 60),
                    (680, 50),
                    (660, 40),
                    (640, 30),
                    (620, 20),
                    (600, 10),
                ],
                "三年级": [
                    (1800, 100),
                    (1700, 95),
                    (1600, 90),
                    (1500, 85),
                    (1400, 80),
                    (1340, 78),
                    (1280, 76),
                    (1220, 74),
                    (1160, 72),
                    (1100, 70),
                    (1040, 68),
                    (980, 66),
                    (920, 64),
                    (860, 62),
                    (800, 60),
                    (780, 50),
                    (760, 40),
                    (740, 30),
                    (720, 20),
                    (700, 10),
                ],
                "四年级": [
                    (2000, 100),
                    (1900, 95),
                    (1800, 90),
                    (1700, 85),
                    (1600, 80),
                    (1530, 78),
                    (1460, 76),
                    (1390, 74),
                    (1320, 72),
                    (1250, 70),
                    (1180, 68),
                    (1110, 66),
                    (1040, 64),
                    (970, 62),
                    (900, 60),
                    (880, 50),
                    (860, 40),
                    (840, 30),
                    (820, 20),
                    (800, 10),
                ],
                "五年级": [
                    (2250, 100),
                    (2150, 95),
                    (2050, 90),
                    (1950, 85),
                    (1850, 80),
                    (1770, 78),
                    (1690, 76),
                    (1610, 74),
                    (1530, 72),
                    (1450, 70),
                    (1370, 68),
                    (1290, 66),
                    (1210, 64),
                    (1130, 62),
                    (1050, 60),
                    (1020, 50),
                    (990, 40),
                    (960, 30),
                    (930, 20),
                    (900, 10),
                ],
                "六年级": [
                    (2500, 100),
                    (2400, 95),
                    (2300, 90),
                    (2200, 85),
                    (2100, 80),
                    (2010, 78),
                    (1920, 76),
                    (1830, 74),
                    (1740, 72),
                    (1650, 70),
                    (1560, 68),
                    (1470, 66),
                    (1380, 64),
                    (1290, 62),
                    (1200, 60),
                    (1170, 50),
                    (1140, 40),
                    (1110, 30),
                    (1080, 20),
                    (1050, 10),
                ],
            },
        }

        # 50米跑评分标准（表1-5、1-6）- 时间越少分数越高
        self.run50_standards = {
            "男": {
                "一年级": [
                    (10.2, 100),
                    (10.3, 95),
                    (10.4, 90),
                    (10.5, 85),
                    (10.6, 80),
                    (10.8, 78),
                    (11.0, 76),
                    (11.2, 74),
                    (11.4, 72),
                    (11.6, 70),
                    (11.8, 68),
                    (12.0, 66),
                    (12.2, 64),
                    (12.4, 62),
                    (12.6, 60),
                    (12.8, 50),
                    (13.0, 40),
                    (13.2, 30),
                    (13.4, 20),
                    (13.6, 10),
                ],
                "二年级": [
                    (9.6, 100),
                    (9.7, 95),
                    (9.8, 90),
                    (9.9, 85),
                    (10.0, 80),
                    (10.2, 78),
                    (10.4, 76),
                    (10.6, 74),
                    (10.8, 72),
                    (11.0, 70),
                    (11.2, 68),
                    (11.4, 66),
                    (11.6, 64),
                    (11.8, 62),
                    (12.0, 60),
                    (12.2, 50),
                    (12.4, 40),
                    (12.6, 30),
                    (12.8, 20),
                    (13.0, 10),
                ],
                "三年级": [
                    (9.1, 100),
                    (9.2, 95),
                    (9.3, 90),
                    (9.4, 85),
                    (9.5, 80),
                    (9.7, 78),
                    (9.9, 76),
                    (10.1, 74),
                    (10.3, 72),
                    (10.5, 70),
                    (10.7, 68),
                    (10.9, 66),
                    (11.1, 64),
                    (11.3, 62),
                    (11.5, 60),
                    (11.7, 50),
                    (11.9, 40),
                    (12.1, 30),
                    (12.3, 20),
                    (12.5, 10),
                ],
                "四年级": [
                    (8.7, 100),
                    (8.8, 95),
                    (8.9, 90),
                    (9.0, 85),
                    (9.1, 80),
                    (9.3, 78),
                    (9.5, 76),
                    (9.7, 74),
                    (9.9, 72),
                    (10.1, 70),
                    (10.3, 68),
                    (10.5, 66),
                    (10.7, 64),
                    (10.9, 62),
                    (11.1, 60),
                    (11.3, 50),
                    (11.5, 40),
                    (11.7, 30),
                    (11.9, 20),
                    (12.1, 10),
                ],
                "五年级": [
                    (8.4, 100),
                    (8.5, 95),
                    (8.6, 90),
                    (8.7, 85),
                    (8.8, 80),
                    (9.0, 78),
                    (9.2, 76),
                    (9.4, 74),
                    (9.6, 72),
                    (9.8, 70),
                    (10.0, 68),
                    (10.2, 66),
                    (10.4, 64),
                    (10.6, 62),
                    (10.8, 60),
                    (11.0, 50),
                    (11.2, 40),
                    (11.4, 30),
                    (11.6, 20),
                    (11.8, 10),
                ],
                "六年级": [
                    (8.2, 100),
                    (8.3, 95),
                    (8.4, 90),
                    (8.5, 85),
                    (8.6, 80),
                    (8.8, 78),
                    (9.0, 76),
                    (9.2, 74),
                    (9.4, 72),
                    (9.6, 70),
                    (9.8, 68),
                    (10.0, 66),
                    (10.2, 64),
                    (10.4, 62),
                    (10.6, 60),
                    (10.8, 50),
                    (11.0, 40),
                    (11.2, 30),
                    (11.4, 20),
                    (11.6, 10),
                ],
            },
            "女": {
                "一年级": [
                    (11.0, 100),
                    (11.1, 95),
                    (11.2, 90),
                    (11.5, 85),
                    (11.8, 80),
                    (12.0, 78),
                    (12.2, 76),
                    (12.4, 74),
                    (12.6, 72),
                    (12.8, 70),
                    (13.0, 68),
                    (13.2, 66),
                    (13.4, 64),
                    (13.6, 62),
                    (13.8, 60),
                    (14.0, 50),
                    (14.2, 40),
                    (14.4, 30),
                    (14.6, 20),
                    (14.8, 10),
                ],
                "二年级": [
                    (10.0, 100),
                    (10.1, 95),
                    (10.2, 90),
                    (10.5, 85),
                    (10.8, 80),
                    (11.0, 78),
                    (11.2, 76),
                    (11.4, 74),
                    (11.6, 72),
                    (11.8, 70),
                    (12.0, 68),
                    (12.2, 66),
                    (12.4, 64),
                    (12.6, 62),
                    (12.8, 60),
                    (13.0, 50),
                    (13.2, 40),
                    (13.4, 30),
                    (13.6, 20),
                    (13.8, 10),
                ],
                "三年级": [
                    (9.2, 100),
                    (9.3, 95),
                    (9.4, 90),
                    (9.7, 85),
                    (10.0, 80),
                    (10.2, 78),
                    (10.4, 76),
                    (10.6, 74),
                    (10.8, 72),
                    (11.0, 70),
                    (11.2, 68),
                    (11.4, 66),
                    (11.6, 64),
                    (11.8, 62),
                    (12.0, 60),
                    (12.2, 50),
                    (12.4, 40),
                    (12.6, 30),
                    (12.8, 20),
                    (13.0, 10),
                ],
                "四年级": [
                    (8.7, 100),
                    (8.8, 95),
                    (8.9, 90),
                    (9.2, 85),
                    (9.5, 80),
                    (9.7, 78),
                    (9.9, 76),
                    (10.1, 74),
                    (10.3, 72),
                    (10.5, 70),
                    (10.7, 68),
                    (10.9, 66),
                    (11.1, 64),
                    (11.3, 62),
                    (11.5, 60),
                    (11.7, 50),
                    (11.9, 40),
                    (12.1, 30),
                    (12.3, 20),
                    (12.5, 10),
                ],
                "五年级": [
                    (8.3, 100),
                    (8.4, 95),
                    (8.5, 90),
                    (8.8, 85),
                    (9.1, 80),
                    (9.3, 78),
                    (9.5, 76),
                    (9.7, 74),
                    (9.9, 72),
                    (10.1, 70),
                    (10.3, 68),
                    (10.5, 66),
                    (10.7, 64),
                    (10.9, 62),
                    (11.1, 60),
                    (11.3, 50),
                    (11.5, 40),
                    (11.7, 30),
                    (11.9, 20),
                    (12.1, 10),
                ],
                "六年级": [
                    (8.2, 100),
                    (8.3, 95),
                    (8.4, 90),
                    (8.7, 85),
                    (9.0, 80),
                    (9.2, 78),
                    (9.4, 76),
                    (9.6, 74),
                    (9.8, 72),
                    (10.0, 70),
                    (10.2, 68),
                    (10.4, 66),
                    (10.6, 64),
                    (10.8, 62),
                    (11.0, 60),
                    (11.2, 50),
                    (11.4, 40),
                    (11.6, 30),
                    (11.8, 20),
                    (12.0, 10),
                ],
            },
        }

        # 坐位体前屈评分标准（表1-7、1-8）
        self.sitreach_standards = {
            "男": {
                "一年级": [
                    (16.1, 100),
                    (14.6, 95),
                    (13.0, 90),
                    (12.0, 85),
                    (11.0, 80),
                    (9.9, 78),
                    (8.8, 76),
                    (7.7, 74),
                    (6.6, 72),
                    (5.5, 70),
                    (4.4, 68),
                    (3.3, 66),
                    (2.2, 64),
                    (1.1, 62),
                    (0.0, 60),
                    (-0.8, 50),
                    (-1.6, 40),
                    (-2.4, 30),
                    (-3.2, 20),
                    (-4.0, 10),
                ],
                "二年级": [
                    (16.2, 100),
                    (14.7, 95),
                    (13.2, 90),
                    (11.9, 85),
                    (10.6, 80),
                    (9.5, 78),
                    (8.4, 76),
                    (7.3, 74),
                    (6.2, 72),
                    (5.1, 70),
                    (4.0, 68),
                    (2.9, 66),
                    (1.8, 64),
                    (0.7, 62),
                    (-0.4, 60),
                    (-1.2, 50),
                    (-2.0, 40),
                    (-2.8, 30),
                    (-3.6, 20),
                    (-4.4, 10),
                ],
                "三年级": [
                    (16.3, 100),
                    (14.9, 95),
                    (13.4, 90),
                    (11.8, 85),
                    (10.2, 80),
                    (9.1, 78),
                    (8.0, 76),
                    (6.9, 74),
                    (5.8, 72),
                    (4.7, 70),
                    (3.6, 68),
                    (2.5, 66),
                    (1.4, 64),
                    (0.3, 62),
                    (-0.8, 60),
                    (-1.6, 50),
                    (-2.4, 40),
                    (-3.2, 30),
                    (-4.0, 20),
                    (-4.8, 10),
                ],
                "四年级": [
                    (16.4, 100),
                    (15.0, 95),
                    (13.6, 90),
                    (11.7, 85),
                    (9.8, 80),
                    (8.6, 78),
                    (7.4, 76),
                    (6.2, 74),
                    (5.0, 72),
                    (3.8, 70),
                    (2.6, 68),
                    (1.4, 66),
                    (0.2, 64),
                    (-1.0, 62),
                    (-2.2, 60),
                    (-3.2, 50),
                    (-4.2, 40),
                    (-5.2, 30),
                    (-6.2, 20),
                    (-7.2, 10),
                ],
                "五年级": [
                    (16.5, 100),
                    (15.2, 95),
                    (13.8, 90),
                    (11.6, 85),
                    (9.4, 80),
                    (8.2, 78),
                    (7.0, 76),
                    (5.8, 74),
                    (4.6, 72),
                    (3.4, 70),
                    (2.2, 68),
                    (1.0, 66),
                    (-0.2, 64),
                    (-1.4, 62),
                    (-2.6, 60),
                    (-3.6, 50),
                    (-4.6, 40),
                    (-5.6, 30),
                    (-6.6, 20),
                    (-7.6, 10),
                ],
                "六年级": [
                    (16.6, 100),
                    (15.3, 95),
                    (14.0, 90),
                    (11.5, 85),
                    (9.0, 80),
                    (7.7, 78),
                    (6.4, 76),
                    (5.1, 74),
                    (3.8, 72),
                    (2.5, 70),
                    (1.2, 68),
                    (-0.1, 66),
                    (-1.4, 64),
                    (-2.7, 62),
                    (-4.0, 60),
                    (-5.0, 50),
                    (-6.0, 40),
                    (-7.0, 30),
                    (-8.0, 20),
                    (-9.0, 10),
                ],
            },
            "女": {
                "一年级": [
                    (18.6, 100),
                    (17.3, 95),
                    (16.0, 90),
                    (14.7, 85),
                    (13.4, 80),
                    (12.3, 78),
                    (11.2, 76),
                    (10.1, 74),
                    (9.0, 72),
                    (7.9, 70),
                    (6.8, 68),
                    (5.7, 66),
                    (4.6, 64),
                    (3.5, 62),
                    (2.4, 60),
                    (1.6, 50),
                    (0.8, 40),
                    (0.0, 30),
                    (-0.8, 20),
                    (-1.6, 10),
                ],
                "二年级": [
                    (18.9, 100),
                    (17.6, 95),
                    (16.3, 90),
                    (14.8, 85),
                    (13.3, 80),
                    (12.2, 78),
                    (11.1, 76),
                    (10.0, 74),
                    (8.9, 72),
                    (7.8, 70),
                    (6.7, 68),
                    (5.6, 66),
                    (4.5, 64),
                    (3.4, 62),
                    (2.3, 60),
                    (1.5, 50),
                    (0.7, 40),
                    (-0.1, 30),
                    (-0.9, 20),
                    (-1.7, 10),
                ],
                "三年级": [
                    (19.2, 100),
                    (17.9, 95),
                    (16.6, 90),
                    (14.9, 85),
                    (13.2, 80),
                    (12.1, 78),
                    (11.0, 76),
                    (9.9, 74),
                    (8.8, 72),
                    (7.7, 70),
                    (6.6, 68),
                    (5.5, 66),
                    (4.4, 64),
                    (3.3, 62),
                    (2.2, 60),
                    (1.4, 50),
                    (0.6, 40),
                    (-0.2, 30),
                    (-1.0, 20),
                    (-1.8, 10),
                ],
                "四年级": [
                    (19.5, 100),
                    (18.1, 95),
                    (16.9, 90),
                    (15.0, 85),
                    (13.1, 80),
                    (12.0, 78),
                    (10.9, 76),
                    (9.8, 74),
                    (8.7, 72),
                    (7.6, 70),
                    (6.5, 68),
                    (5.4, 66),
                    (4.3, 64),
                    (3.2, 62),
                    (2.1, 60),
                    (1.3, 50),
                    (0.5, 40),
                    (-0.3, 30),
                    (-1.1, 20),
                    (-1.9, 10),
                ],
                "五年级": [
                    (19.8, 100),
                    (18.5, 95),
                    (17.2, 90),
                    (15.1, 85),
                    (13.0, 80),
                    (11.9, 78),
                    (10.8, 76),
                    (9.7, 74),
                    (8.6, 72),
                    (7.5, 70),
                    (6.4, 68),
                    (5.3, 66),
                    (4.2, 64),
                    (3.1, 62),
                    (2.0, 60),
                    (1.2, 50),
                    (0.4, 40),
                    (-0.4, 30),
                    (-1.2, 20),
                    (-2.0, 10),
                ],
                "六年级": [
                    (19.9, 100),
                    (18.7, 95),
                    (17.5, 90),
                    (15.2, 85),
                    (12.9, 80),
                    (11.8, 78),
                    (10.7, 76),
                    (9.6, 74),
                    (8.5, 72),
                    (7.4, 70),
                    (6.3, 68),
                    (5.2, 66),
                    (4.1, 64),
                    (3.0, 62),
                    (1.9, 60),
                    (1.1, 50),
                    (0.3, 40),
                    (-0.5, 30),
                    (-1.3, 20),
                    (-2.1, 10),
                ],
            },
        }
        # 跳绳评分标准（表1-9、1-10）
        self.rope_standards = {
            "男": {
                "一年级": [
                    (109, 100),
                    (104, 95),
                    (99, 90),
                    (93, 85),
                    (87, 80),
                    (80, 78),
                    (73, 76),
                    (66, 74),
                    (59, 72),
                    (52, 70),
                    (45, 68),
                    (38, 66),
                    (31, 64),
                    (24, 62),
                    (17, 60),
                    (14, 50),
                    (11, 40),
                    (8, 30),
                    (5, 20),
                    (2, 10),
                ],
                "二年级": [
                    (117, 100),
                    (112, 95),
                    (107, 90),
                    (101, 85),
                    (95, 80),
                    (88, 78),
                    (81, 76),
                    (74, 74),
                    (67, 72),
                    (60, 70),
                    (53, 68),
                    (46, 66),
                    (39, 64),
                    (32, 62),
                    (25, 60),
                    (22, 50),
                    (19, 40),
                    (16, 30),
                    (13, 20),
                    (10, 10),
                ],
                "三年级": [
                    (126, 100),
                    (121, 95),
                    (116, 90),
                    (110, 85),
                    (104, 80),
                    (97, 78),
                    (90, 76),
                    (83, 74),
                    (76, 72),
                    (69, 70),
                    (62, 68),
                    (55, 66),
                    (48, 64),
                    (41, 62),
                    (34, 60),
                    (31, 50),
                    (28, 40),
                    (25, 30),
                    (22, 20),
                    (19, 10),
                ],
                "四年级": [
                    (137, 100),
                    (132, 95),
                    (127, 90),
                    (121, 85),
                    (115, 80),
                    (108, 78),
                    (101, 76),
                    (94, 74),
                    (87, 72),
                    (80, 70),
                    (73, 68),
                    (66, 66),
                    (59, 64),
                    (52, 62),
                    (45, 60),
                    (42, 50),
                    (39, 40),
                    (36, 30),
                    (33, 20),
                    (30, 10),
                ],
                "五年级": [
                    (148, 100),
                    (143, 95),
                    (138, 90),
                    (132, 85),
                    (126, 80),
                    (119, 78),
                    (112, 76),
                    (105, 74),
                    (98, 72),
                    (91, 70),
                    (84, 68),
                    (77, 66),
                    (70, 64),
                    (63, 62),
                    (56, 60),
                    (53, 50),
                    (50, 40),
                    (47, 30),
                    (44, 20),
                    (41, 10),
                ],
                "六年级": [
                    (157, 100),
                    (152, 95),
                    (147, 90),
                    (141, 85),
                    (135, 80),
                    (128, 78),
                    (121, 76),
                    (114, 74),
                    (107, 72),
                    (100, 70),
                    (93, 68),
                    (86, 66),
                    (79, 64),
                    (72, 62),
                    (65, 60),
                    (62, 50),
                    (59, 40),
                    (56, 30),
                    (53, 20),
                    (50, 10),
                ],
            },
            "女": {
                "一年级": [
                    (117, 100),
                    (110, 95),
                    (103, 90),
                    (95, 85),
                    (87, 80),
                    (80, 78),
                    (73, 76),
                    (66, 74),
                    (59, 72),
                    (52, 70),
                    (45, 68),
                    (38, 66),
                    (31, 64),
                    (24, 62),
                    (17, 60),
                    (14, 50),
                    (11, 40),
                    (8, 30),
                    (5, 20),
                    (2, 10),
                ],
                "二年级": [
                    (127, 100),
                    (120, 95),
                    (113, 90),
                    (105, 85),
                    (97, 80),
                    (90, 78),
                    (83, 76),
                    (76, 74),
                    (69, 72),
                    (62, 70),
                    (55, 68),
                    (48, 66),
                    (41, 64),
                    (34, 62),
                    (27, 60),
                    (24, 50),
                    (21, 40),
                    (18, 30),
                    (15, 20),
                    (12, 10),
                ],
                "三年级": [
                    (139, 100),
                    (132, 95),
                    (125, 90),
                    (117, 85),
                    (109, 80),
                    (102, 78),
                    (95, 76),
                    (88, 74),
                    (81, 72),
                    (74, 70),
                    (67, 68),
                    (60, 66),
                    (53, 64),
                    (46, 62),
                    (39, 60),
                    (36, 50),
                    (33, 40),
                    (30, 30),
                    (27, 20),
                    (24, 10),
                ],
                "四年级": [
                    (149, 100),
                    (142, 95),
                    (135, 90),
                    (127, 85),
                    (119, 80),
                    (112, 78),
                    (105, 76),
                    (98, 74),
                    (91, 72),
                    (84, 70),
                    (77, 68),
                    (70, 66),
                    (63, 64),
                    (56, 62),
                    (49, 60),
                    (46, 50),
                    (43, 40),
                    (40, 30),
                    (37, 20),
                    (34, 10),
                ],
                "五年级": [
                    (158, 100),
                    (151, 95),
                    (144, 90),
                    (136, 85),
                    (128, 80),
                    (121, 78),
                    (114, 76),
                    (107, 74),
                    (100, 72),
                    (93, 70),
                    (86, 68),
                    (79, 66),
                    (72, 64),
                    (65, 62),
                    (58, 60),
                    (55, 50),
                    (52, 40),
                    (49, 30),
                    (46, 20),
                    (43, 10),
                ],
                "六年级": [
                    (166, 100),
                    (159, 95),
                    (152, 90),
                    (144, 85),
                    (136, 80),
                    (129, 78),
                    (122, 76),
                    (115, 74),
                    (108, 72),
                    (101, 70),
                    (94, 68),
                    (87, 66),
                    (80, 64),
                    (73, 62),
                    (66, 60),
                    (63, 50),
                    (60, 40),
                    (57, 30),
                    (54, 20),
                    (51, 10),
                ],
            },
        }
        # 仰卧起坐评分标准（表1-13、1-14）
        self.situp_standards = {
            "男": {
                "三年级": [
                    (48, 100),
                    (45, 95),
                    (42, 90),
                    (39, 85),
                    (36, 80),
                    (34, 78),
                    (32, 76),
                    (30, 74),
                    (28, 72),
                    (26, 70),
                    (24, 68),
                    (22, 66),
                    (20, 64),
                    (18, 62),
                    (16, 60),
                    (14, 50),
                    (12, 40),
                    (10, 30),
                    (8, 20),
                    (6, 10),
                ],
                "四年级": [
                    (49, 100),
                    (46, 95),
                    (43, 90),
                    (40, 85),
                    (37, 80),
                    (35, 78),
                    (33, 76),
                    (31, 74),
                    (29, 72),
                    (27, 70),
                    (25, 68),
                    (23, 66),
                    (21, 64),
                    (19, 62),
                    (17, 60),
                    (15, 50),
                    (13, 40),
                    (11, 30),
                    (9, 20),
                    (7, 10),
                ],
                "五年级": [
                    (50, 100),
                    (47, 95),
                    (44, 90),
                    (41, 85),
                    (38, 80),
                    (36, 78),
                    (34, 76),
                    (32, 74),
                    (30, 72),
                    (28, 70),
                    (26, 68),
                    (24, 66),
                    (22, 64),
                    (20, 62),
                    (18, 60),
                    (16, 50),
                    (14, 40),
                    (12, 30),
                    (10, 20),
                    (8, 10),
                ],
                "六年级": [
                    (51, 100),
                    (48, 95),
                    (45, 90),
                    (42, 85),
                    (39, 80),
                    (37, 78),
                    (35, 76),
                    (33, 74),
                    (31, 72),
                    (29, 70),
                    (27, 68),
                    (25, 66),
                    (23, 64),
                    (21, 62),
                    (19, 60),
                    (17, 50),
                    (15, 40),
                    (13, 30),
                    (11, 20),
                    (9, 10),
                ],
            },
            "女": {
                "三年级": [
                    (46, 100),
                    (44, 95),
                    (42, 90),
                    (39, 85),
                    (36, 80),
                    (34, 78),
                    (32, 76),
                    (30, 74),
                    (28, 72),
                    (26, 70),
                    (24, 68),
                    (22, 66),
                    (20, 64),
                    (18, 62),
                    (16, 60),
                    (14, 50),
                    (12, 40),
                    (10, 30),
                    (8, 20),
                    (6, 10),
                ],
                "四年级": [
                    (47, 100),
                    (45, 95),
                    (43, 90),
                    (40, 85),
                    (37, 80),
                    (35, 78),
                    (33, 76),
                    (31, 74),
                    (29, 72),
                    (27, 70),
                    (25, 68),
                    (23, 66),
                    (21, 64),
                    (19, 62),
                    (17, 60),
                    (15, 50),
                    (13, 40),
                    (11, 30),
                    (9, 20),
                    (7, 10),
                ],
                "五年级": [
                    (48, 100),
                    (46, 95),
                    (44, 90),
                    (41, 85),
                    (38, 80),
                    (36, 78),
                    (34, 76),
                    (32, 74),
                    (30, 72),
                    (28, 70),
                    (26, 68),
                    (24, 66),
                    (22, 64),
                    (20, 62),
                    (18, 60),
                    (16, 50),
                    (14, 40),
                    (12, 30),
                    (10, 20),
                    (8, 10),
                ],
                "六年级": [
                    (49, 100),
                    (47, 95),
                    (45, 90),
                    (42, 85),
                    (39, 80),
                    (37, 78),
                    (35, 76),
                    (33, 74),
                    (31, 72),
                    (29, 70),
                    (27, 68),
                    (25, 66),
                    (23, 64),
                    (21, 62),
                    (19, 60),
                    (17, 50),
                    (15, 40),
                    (13, 30),
                    (11, 20),
                    (9, 10),
                ],
            },
        }
        # 50米×8往返跑评分标准（表1-15、1-16）- 时间转换为秒数，越少分数越高
        self.run8_standards = {
            "男": {
                "五年级": [
                    (96, 100),
                    (99, 95),
                    (102, 90),
                    (105, 85),
                    (108, 80),
                    (111, 78),
                    (114, 76),
                    (117, 74),
                    (120, 72),
                    (123, 70),
                    (126, 68),
                    (129, 66),
                    (132, 64),
                    (135, 62),
                    (138, 60),
                    (142, 50),
                    (146, 40),
                    (150, 30),
                    (154, 20),
                    (158, 10),
                ],
                "六年级": [
                    (90, 100),
                    (93, 95),
                    (96, 90),
                    (99, 85),
                    (102, 80),
                    (105, 78),
                    (108, 76),
                    (111, 74),
                    (114, 72),
                    (117, 70),
                    (120, 68),
                    (123, 66),
                    (126, 64),
                    (129, 62),
                    (132, 60),
                    (136, 50),
                    (140, 40),
                    (144, 30),
                    (148, 20),
                    (152, 10),
                ],
            },
            "女": {
                "五年级": [
                    (101, 100),
                    (104, 95),
                    (107, 90),
                    (110, 85),
                    (113, 80),
                    (116, 78),
                    (119, 76),
                    (122, 74),
                    (125, 72),
                    (128, 70),
                    (131, 68),
                    (134, 66),
                    (137, 64),
                    (140, 62),
                    (143, 60),
                    (147, 50),
                    (151, 40),
                    (155, 30),
                    (159, 20),
                    (163, 10),
                ],
                "六年级": [
                    (97, 100),
                    (100, 95),
                    (103, 90),
                    (106, 85),
                    (109, 80),
                    (112, 78),
                    (115, 76),
                    (118, 74),
                    (121, 72),
                    (124, 70),
                    (127, 68),
                    (130, 66),
                    (133, 64),
                    (136, 62),
                    (139, 60),
                    (143, 50),
                    (147, 40),
                    (151, 30),
                    (155, 20),
                    (159, 10),
                ],
            },
        }

    def extract_grade_from_class(self, class_name):
        """从班级名称中提取年级"""
        if pd.isna(class_name):
            return None

        class_str = str(class_name)
        for grade in ["一年级", "二年级", "三年级", "四年级", "五年级", "六年级"]:
            if grade in class_str:
                return grade
        return None

    def get_class_number(self, class_name):
        """从班级名称中提取班号"""
        if pd.isna(class_name):
            return None

        match = re.search(r"(\d+)班", str(class_name))
        if match:
            return int(match.group(1))
        return None

    def apply_year_class_filter(self, df):
        """根据年级班级过滤参数过滤数据"""
        if not self.year_class_filter:
            return df

        print(f"应用年级班级过滤: {self.year_class_filter}")

        # 创建过滤条件
        filter_conditions = []

        for year, classes in self.year_class_filter.items():
            if not classes:  # 如果班级列表为空，则包含该年级的所有班级
                year_condition = df["年级"] == year
                filter_conditions.append(year_condition)
                print(f"包含{year}的所有班级")
            else:
                # 过滤特定年级的特定班级
                year_condition = df["年级"] == year

                # 将班级名转换为班号进行比较
                class_numbers = []
                for class_name in classes:
                    # 从 "1班" 提取数字 1
                    match = re.search(r"^(\d+)班$", class_name)
                    if match:
                        class_numbers.append(int(match.group(1)))

                if class_numbers:
                    class_condition = df["班号"].isin(class_numbers)
                    combined_condition = year_condition & class_condition
                    filter_conditions.append(combined_condition)
                    print(f"包含{year}的班级: {classes} (班号: {class_numbers})")

        if filter_conditions:
            # 使用 OR 逻辑组合所有条件
            final_condition = filter_conditions[0]
            for condition in filter_conditions[1:]:
                final_condition = final_condition | condition

            filtered_df = df[final_condition]
            return filtered_df
        else:
            return df

    def calculate_bmi(self, height, weight):
        """计算BMI"""
        try:
            height_m = float(height) / 100
            weight_kg = float(weight)
            return round(weight_kg / (height_m**2), 1)
        except:
            return None

    def get_score_from_table(self, value, standards_table, reverse=False):
        """根据评分表获取分数"""
        if pd.isna(value):
            return np.nan

        for threshold, score in standards_table:
            if reverse:  # 对于时间类项目，数值越小分数越高
                if value <= threshold:
                    return score
            else:  # 对于其他项目，数值越大分数越高
                if value >= threshold:
                    return score

        # 如果都不满足，返回最低分
        return standards_table[-1][1]

    def get_bmi_score_and_grade(self, bmi, gender, grade):
        """获取BMI分数和等级"""
        if pd.isna(bmi) or grade not in self.bmi_standards.get(gender, {}):
            return np.nan, "未测"

        standards = self.bmi_standards[gender][grade]

        if standards["正常"][0] <= bmi <= standards["正常"][1]:
            return 100, "正常"
        elif bmi <= standards["低体重"][1]:
            return 80, "低体重"
        elif standards["超重"][0] <= bmi <= standards["超重"][1]:
            return 80, "超重"
        elif bmi >= standards["肥胖"][0]:
            return 60, "肥胖"
        else:
            return 80, "正常"  # 默认

    def get_grade_from_score(self, score):
        """根据分数获取等级"""
        if pd.isna(score):
            return "未测"
        elif score >= 90:
            return "优秀"
        elif score >= 80:
            return "良好"
        elif score >= 60:
            return "及格"
        else:
            return "不及格"

    def convert_time_to_seconds(self, time_str):
        """将时间字符串转换为秒数"""
        if pd.isna(time_str):
            return np.nan

        try:
            # 处理可能的时间格式
            time_str = str(time_str).strip()
            if ":" in time_str:
                parts = time_str.split(":")
                minutes = float(parts[0])
                seconds = float(parts[1])
                return minutes * 60 + seconds
            else:
                return float(time_str)
        except:
            return np.nan

    def calculate_all_scores_by_standards(self, df):
        """根据国家标准计算所有项目得分"""
        print("根据国家标准计算各项目得分...")

        # 先确保BMI列存在
        if "BMI" not in df.columns:
            if "身高(cm)" in df.columns and "体重(kg)" in df.columns:
                df["BMI"] = df.apply(
                    lambda row: self.calculate_bmi(row["身高(cm)"], row["体重(kg)"]),
                    axis=1,
                )
            else:
                print("警告：缺少身高或体重数据，无法计算BMI")

        # 初始化得分和等级列
        df["BMI得分"] = np.nan
        df["BMI等级"] = "未测"
        df["肺活量得分"] = np.nan
        df["肺活量等级"] = "未测"
        df["50米跑得分"] = np.nan
        df["50米跑等级"] = "未测"
        df["坐位体前屈得分"] = np.nan
        df["坐位体前屈等级"] = "未测"
        df["跳绳得分"] = np.nan
        df["跳绳等级"] = "未测"
        df["仰卧起坐得分"] = np.nan
        df["仰卧起坐等级"] = "未测"
        df["往返跑得分"] = np.nan
        df["往返跑等级"] = "未测"
        df["附加分"] = 0

        # 按年级和性别分组计算 - 只处理四年级和六年级
        for grade in ["四年级", "六年级"]:
            for gender in ["男", "女"]:
                mask = (df["年级"] == grade) & (df["性别"] == gender)
                if not mask.any():
                    continue

                print(f"计算{grade}{gender}学生得分...")

                # BMI评分
                for idx in df[mask].index:
                    if "BMI" in df.columns:
                        bmi = df.loc[idx, "BMI"]
                        score, grade_level = self.get_bmi_score_and_grade(
                            bmi, gender, grade
                        )
                        df.loc[idx, "BMI得分"] = score
                        df.loc[idx, "BMI等级"] = grade_level

                # 肺活量评分
                if (
                    gender in self.lung_standards
                    and grade in self.lung_standards[gender]
                ):
                    standards = self.lung_standards[gender][grade]
                    for idx in df[mask].index:
                        value = (
                            df.loc[idx, "肺活量(ml)"]
                            if "肺活量(ml)" in df.columns
                            else np.nan
                        )
                        score = self.get_score_from_table(
                            value, standards, reverse=False
                        )
                        df.loc[idx, "肺活量得分"] = score
                        df.loc[idx, "肺活量等级"] = self.get_grade_from_score(score)

                # 50米跑评分
                if (
                    gender in self.run50_standards
                    and grade in self.run50_standards[gender]
                ):
                    standards = self.run50_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, "50米跑(s)"]
                        # 数据有效性检查：如果为空值，得分留空，等级为'未测'
                        if pd.isna(value):
                            score = np.nan
                            grade_level = "未测"
                        elif value <= 0 or value > 60:
                            score = 0  # 无效数据给0分
                            grade_level = self.get_grade_from_score(score)
                        else:
                            score = self.get_score_from_table(
                                value, standards, reverse=True
                            )
                            grade_level = self.get_grade_from_score(score)
                        df.loc[idx, "50米跑得分"] = score
                        df.loc[idx, "50米跑等级"] = grade_level

                # 坐位体前屈评分
                if (
                    gender in self.sitreach_standards
                    and grade in self.sitreach_standards[gender]
                ):
                    standards = self.sitreach_standards[gender][grade]
                    for idx in df[mask].index:
                        value = (
                            df.loc[idx, "坐位体前屈(cm)"]
                            if "坐位体前屈(cm)" in df.columns
                            else np.nan
                        )
                        score = self.get_score_from_table(
                            value, standards, reverse=False
                        )
                        df.loc[idx, "坐位体前屈得分"] = score
                        df.loc[idx, "坐位体前屈等级"] = self.get_grade_from_score(score)

                # 跳绳评分
                if (
                    gender in self.rope_standards
                    and grade in self.rope_standards[gender]
                ):
                    standards = self.rope_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, "一分钟跳绳(个）"]
                        score = self.get_score_from_table(
                            value, standards, reverse=False
                        )
                        df.loc[idx, "跳绳得分"] = score
                        df.loc[idx, "跳绳等级"] = self.get_grade_from_score(score)

                        # 计算跳绳加分（小学跳绳为加分项目）
                        if pd.notna(score) and score == 100:
                            # 如果达到100分，计算超出部分的加分
                            max_standard = standards[0][0]  # 100分对应的次数
                            if pd.notna(value) and value > max_standard:
                                # 按照加分表计算，每超出一定次数给对应加分
                                extra_count = value - max_standard
                                # 跳绳加分标准（根据国家标准）
                                # 跳绳加分：每超出2个给1分，最高20分
                                bonus_score = min(20, extra_count // 2)
                                df.loc[idx, "附加分"] = bonus_score

                # 仰卧起坐评分（三年级及以上）
                if grade in ["三年级", "四年级", "五年级", "六年级"]:
                    if (
                        gender in self.situp_standards
                        and grade in self.situp_standards[gender]
                    ):
                        standards = self.situp_standards[gender][grade]
                        for idx in df[mask].index:
                            value = (
                                df.loc[idx, "一分钟仰卧起坐(个)"]
                                if "一分钟仰卧起坐(个)" in df.columns
                                else np.nan
                            )
                            score = self.get_score_from_table(
                                value, standards, reverse=False
                            )
                            df.loc[idx, "仰卧起坐得分"] = score
                            df.loc[idx, "仰卧起坐等级"] = self.get_grade_from_score(
                                score
                            )

                # 50米×8往返跑评分（五六年级）
                if grade in ["五年级", "六年级"]:
                    if (
                        gender in self.run8_standards
                        and grade in self.run8_standards[gender]
                    ):
                        standards = self.run8_standards[gender][grade]
                        for idx in df[mask].index:
                            value = df.loc[idx, "50米×8往返跑(s)"]
                            if pd.notna(value):
                                # 如果是时间格式，转换为秒数
                                seconds = self.convert_time_to_seconds(value)
                                # 数据有效性检查：往返跑时间必须在合理范围内（30-300秒）
                                if pd.isna(seconds) or seconds <= 0 or seconds > 300:
                                    score = 0  # 无效数据给0分
                                else:
                                    score = self.get_score_from_table(
                                        seconds, standards, reverse=True
                                    )
                                df.loc[idx, "往返跑得分"] = score
                                df.loc[idx, "往返跑等级"] = self.get_grade_from_score(
                                    score
                                )

    def calculate_comprehensive_score(self, df):
        """根据国家标准权重计算综合得分"""
        print("计算综合得分...")

        df["标准分"] = 0.0

        for idx, row in df.iterrows():
            grade = row["年级"]
            if grade not in self.weights:
                continue

            weights = self.weights[grade]
            total_score = 0

            # 根据年级计算加权总分
            if pd.notna(row["BMI得分"]):
                total_score += row["BMI得分"] * weights.get("BMI", 0)

            if pd.notna(row["肺活量得分"]):
                total_score += row["肺活量得分"] * weights.get("肺活量", 0)

            if pd.notna(row["50米跑得分"]):
                total_score += row["50米跑得分"] * weights.get("50米跑", 0)

            if pd.notna(row["坐位体前屈得分"]):
                total_score += row["坐位体前屈得分"] * weights.get("坐位体前屈", 0)

            if pd.notna(row["跳绳得分"]):
                total_score += row["跳绳得分"] * weights.get("跳绳", 0)

            if grade in ["三年级", "四年级", "五年级", "六年级"] and pd.notna(
                row["仰卧起坐得分"]
            ):
                total_score += row["仰卧起坐得分"] * weights.get("仰卧起坐", 0)

            if grade in ["五年级", "六年级"] and pd.notna(row["往返跑得分"]):
                total_score += row["往返跑得分"] * weights.get("往返跑", 0)

            df.loc[idx, "标准分"] = round(total_score, 1)  # 改成 float

        # 综合得分 = 标准分 + 附加分
        df["综合得分"] = df["标准分"] + df["附加分"]

        # 设置综合等级，如果所有测试项目都没有参与则为'未测'
        def get_comprehensive_grade(row):
            # 检查主要测试项目是否都为空（BMI、肺活量、50米跑、坐位体前屈、跳绳）
            main_scores = [
                row["BMI得分"],
                row["肺活量得分"],
                row["50米跑得分"],
                row["坐位体前屈得分"],
                row["跳绳得分"],
            ]
            # 对于三年级及以上还要检查仰卧起坐
            if row["年级"] in ["三年级", "四年级", "五年级", "六年级"]:
                main_scores.append(row["仰卧起坐得分"])
            # 对于五六年级还要检查往返跑
            if row["年级"] in ["五年级", "六年级"]:
                main_scores.append(row["往返跑得分"])

            # 如果所有主要项目都是空值，则为'未测'
            if all(pd.isna(score) for score in main_scores):
                return "未测"
            else:
                return self.get_grade_from_score(row["综合得分"])

        df["综合等级"] = df.apply(get_comprehensive_grade, axis=1)

    def calculate_statistics(self, df):
        """计算统计数据"""
        stats = {}

        # 基本统计
        stats["total_count"] = len(df)
        stats["male_count"] = len(df[df["性别"] == "男"])
        stats["female_count"] = len(df[df["性别"] == "女"])

        # 实查人数（有综合等级且不为'未测'的学生）
        tested_students = df[df["综合等级"] != "未测"]
        stats["tested_total"] = len(tested_students)
        stats["tested_male"] = len(tested_students[tested_students["性别"] == "男"])
        stats["tested_female"] = len(tested_students[tested_students["性别"] == "女"])

        # 计算实查比率
        stats["total_ratio"] = f"{stats['tested_total']/stats['total_count']*100:.1f}%"
        stats["male_ratio"] = (
            f"{stats['tested_male']/stats['male_count']*100:.1f}%"
            if stats["male_count"] > 0
            else "0%"
        )
        stats["female_ratio"] = (
            f"{stats['tested_female']/stats['female_count']*100:.1f}%"
            if stats["female_count"] > 0
            else "0%"
        )

        # 综合等级统计（只统计实际参与测试的学生，排除'未测'）
        tested_grade_counts = tested_students["综合等级"].value_counts()
        stats["excellent_total"] = tested_grade_counts.get("优秀", 0)
        stats["good_total"] = tested_grade_counts.get("良好", 0)
        stats["pass_total"] = tested_grade_counts.get("及格", 0)
        stats["fail_total"] = tested_grade_counts.get("不及格", 0)

        # 分性别统计综合等级（只统计实际参与测试的学生）
        tested_male = tested_students[tested_students["性别"] == "男"]
        tested_female = tested_students[tested_students["性别"] == "女"]
        male_grades = tested_male["综合等级"].value_counts()
        female_grades = tested_female["综合等级"].value_counts()

        stats["excellent_male"] = male_grades.get("优秀", 0)
        stats["excellent_female"] = female_grades.get("优秀", 0)
        stats["good_male"] = male_grades.get("良好", 0)
        stats["good_female"] = female_grades.get("良好", 0)
        stats["pass_male"] = male_grades.get("及格", 0)
        stats["pass_female"] = female_grades.get("及格", 0)
        stats["fail_male"] = male_grades.get("不及格", 0)
        stats["fail_female"] = female_grades.get("不及格", 0)

        # 各项目等级人数统计（根据各自得分计算）
        for project in [
            "BMI",
            "肺活量",
            "50米跑",
            "坐位体前屈",
            "跳绳",
            "仰卧起坐",
            "往返跑",
        ]:
            score_col = f"{project}得分"
            if score_col in df.columns:
                project_scores = df[score_col].dropna()
                stats[f"{project}_excellent"] = len(
                    project_scores[project_scores >= 90]
                )
                stats[f"{project}_good"] = len(
                    project_scores[(project_scores >= 80) & (project_scores < 90)]
                )
                stats[f"{project}_pass"] = len(
                    project_scores[(project_scores >= 60) & (project_scores < 80)]
                )
                stats[f"{project}_fail"] = len(project_scores[project_scores < 60])
            else:
                stats[f"{project}_excellent"] = 0
                stats[f"{project}_good"] = 0
                stats[f"{project}_pass"] = 0
                stats[f"{project}_fail"] = 0

        return stats

    def create_directories(self, student_data):
        """为每个年级创建对应的文件夹"""
        print("=== 创建年级文件夹 ===")

        # 从学生数据中获取所有年级
        grades = set(student_data["年级"].dropna().unique())

        # 创建文件夹
        for grade in grades:
            grade_dir = os.path.join(self.output_dir, grade)
            os.makedirs(grade_dir, exist_ok=True)
            print(f"创建文件夹: {grade_dir}")

        return grades

    def load_student_data(self):
        """加载学生数据"""
        print("=== 加载学生数据 ===")
        print("只处理四年级和六年级的数据")

        print(f"读取文件: {self.input_file}")

        try:
            df = pd.read_excel(self.input_file)
            print(f"读取到 {len(df)} 条数据")

            # 列名映射以适应新的Excel格式
            column_mapping = {"学籍号": "学号"}

            # 应用列名映射
            df = df.rename(columns=column_mapping)

            # 数据清理（只检查姓名）
            df_clean = df.dropna(subset=["姓名"])
            print(f"清理后剩余 {len(df_clean)} 条有效数据")

            # 添加年级信息
            df_clean["年级"] = df_clean["班级名称"].apply(self.extract_grade_from_class)
            df_clean["班号"] = df_clean["班级名称"].apply(self.get_class_number)

            # 应用年级班级过滤
            if self.year_class_filter:
                df_clean = self.apply_year_class_filter(df_clean)
                print(f"应用年级班级过滤后剩余 {len(df_clean)} 条数据")
            else:
                # 默认过滤只保留四年级和六年级
                target_grades = ["四年级", "六年级"]
                df_clean = df_clean[df_clean["年级"].isin(target_grades)]
                print(f"过滤后剩余 {len(df_clean)} 条四年级和六年级数据")

            # 计算所有项目得分（包括BMI计算）
            self.calculate_all_scores_by_standards(df_clean)
            self.calculate_comprehensive_score(df_clean)

            print(f"总共处理了 {len(df_clean)} 名学生的数据")
            return df_clean

        except Exception as e:
            print(f"读取文件 {self.input_file} 时出错: {e}")
            return pd.DataFrame()

    def process(self):
        all_data = self.load_student_data()
        if all_data.empty:
            print("没有数据可处理")
            return

        # 临时：只取第一个班级测试
        first_class = all_data["班级名称"].iloc[0]  # 拿第一个班
        class_data = all_data[all_data["班级名称"] == first_class]
        grade_name = class_data["年级"].iloc[0]

        print(f"正在测试生成：{grade_name} - {first_class}")
        self.create_class_summary(class_data, grade_name)  # 只生成这一个班

        print("✅ 测试完成，仅生成一个班级的汇总表，可用于检查格式")

    def create_class_summary(self, class_data, grade, class_num):
        """创建班级汇总表"""
        wb = Workbook()
        ws = wb.active
        ws.title = "初中，高中，大学级"

        # 设置标题
        ws["A1"] = "班级综合评级人数汇总统计"
        ws.merge_cells("A1:R1")
        ws["A1"].font = Font(bold=True, size=24)
        ws["A1"].alignment = Alignment(horizontal="center")

        # 班级信息行
        grade_map = {
            "一年级": "一",
            "二年级": "二",
            "三年级": "三",
            "四年级": "四",
            "五年级": "五",
            "六年级": "六",
        }
        grade_short = grade_map.get(grade, grade)
        class_name = f"{grade_short}{class_num}班"

        ws.merge_cells("A2:C2")
        ws["A2"] = "班级名称："
        ws["A2"].font = Font(size=14)

        ws.merge_cells("D2:F2")
        ws["D2"] = class_name
        ws["D2"].font = Font(size=14)

        ws["G2"] = "测评人："
        ws["G2"].font = Font(size=14)

        ws.merge_cells("J2:K2")
        ws["J2"] = "本次体测日期："
        ws["J2"].font = Font(size=14)

        ws.merge_cells("L2:N2")
        # 根据年级设置测试日期
        ws["L2"] = "2025/09/23-2025/09/24"
        ws["L2"].font = Font(size=14)

        # 统计数据
        total_students = len(class_data)
        male_count = len(class_data[class_data["性别"] == "男"])
        female_count = len(class_data[class_data["性别"] == "女"])

        # 根据实际数据计算统计信息
        stats = self.calculate_statistics(class_data)

        excellent_count = stats["excellent_total"]
        good_count = stats["good_total"]
        pass_count = stats["pass_total"]
        fail_count = stats["fail_total"]

        # 添加统计表格
        self.add_class_statistics(
            ws,
            male_count,
            female_count,
            total_students,
            excellent_count,
            good_count,
            pass_count,
            fail_count,
            stats,
            grade,
        )

        # 添加学生数据
        self.add_class_student_data(ws, class_data)

        # 计算 R9:R12 的总和，并写入 R13
        ws["R13"] = f"=SUM(R9:R12)"
        # 可选：设置单元格样式（居中、加粗等）
        ws["R13"].alignment = Alignment(horizontal="center", vertical="center")
        ws["R13"].font = Font(bold=True)

        # 此时再获取最大行列（必须放在这里！）
        max_row = ws.max_row
        max_col = ws.max_column

        thin_border = Side(border_style="thin", color="000000")
        thick_border = Side(border_style="medium", color="000000")

        # --- 1. 给从第3行到最后一行，所有列加细线边框 + 居中 ---
        for row in ws.iter_rows(min_row=3, max_row=max_row, min_col=1, max_col=max_col):
            for cell in row:
                cell.border = Border(
                    left=thin_border,
                    right=thin_border,
                    top=thin_border,
                    bottom=thin_border,
                )
                cell.alignment = Alignment(horizontal="center", vertical="center")

        # --- 2. 加粗外框：左、右、上、下 ---
        for row_idx in range(3, max_row + 1):  # 修复：包含最后一行
            # 左列
            left_cell = ws.cell(row=row_idx, column=1)
            current = left_cell.border
            left_cell.border = Border(
                left=thick_border,
                right=current.right,
                top=current.top,
                bottom=current.bottom,
            )

            # 右列
            right_cell = ws.cell(row=row_idx, column=max_col)
            current = right_cell.border
            right_cell.border = Border(
                left=current.left,
                right=thick_border,
                top=current.top,
                bottom=current.bottom,
            )

        for col_idx in range(1, max_col + 1):  # 修复：包含最后一列
            # 上边（第3行）
            top_cell = ws.cell(row=3, column=col_idx)
            current = top_cell.border
            top_cell.border = Border(
                left=current.left,
                right=current.right,
                top=thick_border,
                bottom=current.bottom,
            )

            # 下边（最后一行）
            bottom_cell = ws.cell(row=max_row, column=col_idx)
            current = bottom_cell.border
            bottom_cell.border = Border(
                left=current.left,
                right=current.right,
                top=current.top,
                bottom=thick_border,
            )

        # 设置居中
        for row in ws.iter_rows(
            min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column
        ):
            for cell in row:
                cell.alignment = Alignment(horizontal="center", vertical="center")

        # 给表头行（如第2-15行）启用换行和居中
        for row in [2, 15]:
            for cell in ws[row]:
                if cell.value:
                    cell.alignment = Alignment(
                        wrap_text=True, horizontal="center", vertical="center"
                    )
            ws.row_dimensions[row].height = 48.6  # 设置行高

        # 第1-13行内容都居中加粗
        for row_idx in range(1, 14):  # 第1-13行
            for cell in ws[row_idx]:
                if cell.value:
                    cell.alignment = Alignment(horizontal="center", vertical="center")
                    cell.font = Font(bold=True, size=cell.font.size or 11)

        # 设置行高row2-13
        for row in [2, 13]:
            ws.row_dimensions[row].height = 24  # 设置行高

        # 设置列宽
        for column in ["B", "C", "L", "M"]:
            ws.column_dimensions[column].width = 12

        # FGHIJ栏设置为17宽度
        for column in ["F", "G", "H", "J", "K", "L", "O"]:
            ws.column_dimensions[column].width = 15

        ws.column_dimensions["A"].width = 9
        ws.column_dimensions["D"].width = 9
        ws.column_dimensions["I"].width = 17
        ws.column_dimensions["E"].width = 12
        ws.column_dimensions["R"].width = 12
        ws.column_dimensions["N"].width = 16

        return wb

    def add_class_statistics(
        self,
        ws,
        male_count,
        female_count,
        total_count,
        excellent_count,
        good_count,
        pass_count,
        fail_count,
        stats,
        grade,
    ):
        """添加班级统计信息"""

        # 修改第3行的合并
        ws.merge_cells("A3:B3")  # A-B
        ws.merge_cells("C3:D3")  # C-D
        ws.merge_cells("E3:F3")  # E-F
        ws.merge_cells("H3:I3")  # H-I
        ws.merge_cells("J3:L3")  # J-K-L
        ws.merge_cells("M3:N3")  # M-N
        ws.merge_cells("O3:P3")  # O-P
        # R3 不合并，保持单独

        # 第4-6行同理，对A-B, C-D, E-F, H-I, J-K-L, M-N, O-P进行合并
        ws.merge_cells("A4:B4")
        ws.merge_cells("C4:D4")
        ws.merge_cells("E4:F4")
        ws.merge_cells("H4:I4")
        ws.merge_cells("J4:L4")
        ws.merge_cells("M4:N4")
        ws.merge_cells("O4:P4")

        ws.merge_cells("A5:B5")
        ws.merge_cells("C5:D5")
        ws.merge_cells("E5:F5")
        ws.merge_cells("H5:I5")
        ws.merge_cells("J5:L5")
        ws.merge_cells("M5:N5")
        ws.merge_cells("O5:P5")

        ws.merge_cells("A6:B6")
        ws.merge_cells("C6:D6")
        ws.merge_cells("E6:F6")
        ws.merge_cells("H6:I6")
        ws.merge_cells("J6:L6")
        ws.merge_cells("M6:N6")
        ws.merge_cells("O6:P6")

        ws.merge_cells("H2:I2")
        ws.merge_cells("A7:G7")
        ws.merge_cells("H7:I7")
        ws.merge_cells("J7:L7")
        ws.merge_cells("M7:N7")
        ws.merge_cells("O7:P7")

        ws.merge_cells("E8:F8")
        ws.merge_cells("G8:H8")

        ws.merge_cells("E9:F9")
        ws.merge_cells("G9:H9")
        ws.merge_cells("E10:F10")
        ws.merge_cells("G10:H10")
        ws.merge_cells("E11:F11")
        ws.merge_cells("G11:H11")
        ws.merge_cells("E12:F12")
        ws.merge_cells("G12:H12")

        # 表头
        ws["C3"] = "男"
        ws["E3"] = "女"
        ws["G3"] = "总人数"
        ws["H3"] = "综合等级"
        ws["J3"] = "评分a"
        ws["M3"] = "男"
        ws["O3"] = "女"
        ws["Q3"] = "合计"
        ws["R3"] = "占比率%"

        # 应查人数
        ws["A4"] = "应查人数"
        ws["C4"] = male_count
        ws["E4"] = female_count
        ws["G4"] = total_count

        # 实查人数（使用计算出的实际测试人数）
        ws["A5"] = "实查人数"
        ws["C5"] = stats.get("tested_male", 0)
        ws["E5"] = stats.get("tested_female", 0)
        ws["G5"] = stats.get("tested_total", 0)

        # 实查比率（根据实际数据计算）
        ws["A6"] = "实查比率%"
        ws["C6"] = stats.get("male_ratio", "0%")
        ws["E6"] = stats.get("female_ratio", "0%")
        ws["G6"] = stats.get("total_ratio", "0%")

        # 等级统计
        ws["H4"] = "一级（优秀）"
        ws["J4"] = "a ≥ 90.0 分"
        ws["M4"] = stats.get("excellent_male", 0)
        ws["O4"] = stats.get("excellent_female", 0)
        ws["Q4"] = excellent_count
        if total_count > 0:
            ws["R4"] = f"{round(excellent_count/total_count*100)}%"

        ws["H5"] = "二级（良好）"
        ws["J5"] = "80.0 分≤a< 90.0分"
        ws["M5"] = stats.get("good_male", 0)
        ws["O5"] = stats.get("good_female", 0)
        ws["Q5"] = good_count
        if total_count > 0:
            ws["R5"] = f"{round(good_count/total_count*100)}%"

        ws["H6"] = "三级（及格）"
        ws["J6"] = "60 .0分≤a< 80.0分"
        ws["M6"] = stats.get("pass_male", 0)
        ws["O6"] = stats.get("pass_female", 0)
        ws["Q6"] = pass_count
        if total_count > 0:
            ws["R6"] = f"{round(pass_count/total_count*100)}%"

        ws["H7"] = "四级（不及格）"
        ws["J7"] = "a < 60.0 分"
        ws["M7"] = stats.get("fail_male", 0)
        ws["O7"] = stats.get("fail_female", 0)
        ws["Q7"] = fail_count
        if total_count > 0:
            ws["R7"] = f"{round(fail_count/total_count*100)}%"

        # 各单项统计表头
        ws["A8"] = "各单项实查评价人数统计"
        ws["E8"] = "等级"
        ws["G8"] = "评分a"
        ws["I8"] = "体重指数（BMI）"
        ws["J8"] = "肺活量"
        ws["K8"] = "50米跑"
        ws["L8"] = "坐位体前屈"
        ws["M8"] = "一分钟跳绳"

        # 根据年级添加相应的项目表头
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            ws["N8"] = "一分钟仰卧起坐"
        if grade in ["五年级", "六年级"]:
            ws["O8"] = "50米×8往返跑"

        ws["R8"] = "综合等级"

        # 各单项详细统计
        ws["E9"] = "一级（优秀）"
        ws["G9"] = "a ≥ 90.0 分"
        ws["I9"] = stats.get("BMI_excellent", 0)
        ws["J9"] = stats.get("肺活量_excellent", 0)
        ws["K9"] = stats.get("50米跑_excellent", 0)
        ws["L9"] = stats.get("坐位体前屈_excellent", 0)
        ws["M9"] = stats.get("跳绳_excellent", 0)

        # 根据年级添加相应的项目
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            ws["N9"] = stats.get("仰卧起坐_excellent", 0)
        if grade in ["五年级", "六年级"]:
            ws["O9"] = stats.get("往返跑_excellent", 0)

        ws["R9"] = excellent_count

        ws["E10"] = "二级（良好）"
        ws["G10"] = "80.0 分≤a< 90.0分"
        ws["I10"] = stats.get("BMI_good", 0)
        ws["J10"] = stats.get("肺活量_good", 0)
        ws["K10"] = stats.get("50米跑_good", 0)
        ws["L10"] = stats.get("坐位体前屈_good", 0)
        ws["M10"] = stats.get("跳绳_good", 0)

        # 根据年级添加相应的项目
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            ws["N10"] = stats.get("仰卧起坐_good", 0)
        if grade in ["五年级", "六年级"]:
            ws["O10"] = stats.get("往返跑_good", 0)

        ws["R10"] = good_count

        ws["E11"] = "三级（及格）"
        ws["G11"] = "60.0 分≤a< 80.0分"
        ws["I11"] = stats.get("BMI_pass", 0)
        ws["J11"] = stats.get("肺活量_pass", 0)
        ws["K11"] = stats.get("50米跑_pass", 0)
        ws["L11"] = stats.get("坐位体前屈_pass", 0)
        ws["M11"] = stats.get("跳绳_pass", 0)

        # 根据年级添加相应的项目
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            ws["N11"] = stats.get("仰卧起坐_pass", 0)
        if grade in ["五年级", "六年级"]:
            ws["O11"] = stats.get("往返跑_pass", 0)

        ws["R11"] = pass_count

        ws["E12"] = "四级（不及格）"
        ws["G12"] = "a < 60.0 分"
        ws["I12"] = stats.get("BMI_fail", 0)
        ws["J12"] = stats.get("肺活量_fail", 0)
        ws["K12"] = stats.get("50米跑_fail", 0)
        ws["L12"] = stats.get("坐位体前屈_fail", 0)
        ws["M12"] = stats.get("跳绳_fail", 0)

        # 根据年级添加相应的项目
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            ws["N12"] = stats.get("仰卧起坐_fail", 0)
        if grade in ["五年级", "六年级"]:
            ws["O12"] = stats.get("往返跑_fail", 0)

        ws["R12"] = fail_count

        # --- 合并 A8:D13 ---
        ws.merge_cells(
            "A8:D13"
        )  # 也可以写成 start_row=8, start_column=1, end_row=13, end_column=4

        # 设置合并后单元格的内容
        cell = ws["A8"]
        cell.value = "各单项实查评价人数统计"

        # 可选：设置格式（居中 + 加粗）
        cell.alignment = Alignment(
            horizontal="center",  # 水平居中
            vertical="center",  # 垂直居中
            wrap_text=True,  # 自动换行（如果文字太长）
        )
        cell.font = Font(bold=True)

        # --- 合并 E13:H13 并写入“单项实查人数合计” ---
        ws.merge_cells("E13:H13")
        cell = ws["E13"]
        cell.value = "单项实查人数合计"
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # --- 计算项目列的第9~12行（四个等级）的人数总和，并写入第13行 ---
        # 基础项目列：I=9, J=10, K=11, L=12, M=13
        project_cols = list(range(9, 14))  # I到M

        # 根据年级添加额外的项目列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            project_cols.append(14)  # N=14 仰卧起坐
        if grade in ["五年级", "六年级"]:
            project_cols.append(15)  # O=15 往返跑

        grade_rows = range(9, 13)  # 第9、10、11、12行

        for col_idx in project_cols:
            total = 0
            for row in grade_rows:
                cell = ws.cell(row=row, column=col_idx)
                value = cell.value
                if isinstance(value, (int, float)):
                    total += value
            # 写入第13行
            ws.cell(row=13, column=col_idx, value=total)

        # --- 可选：给第13行加粗 ---
        for col_idx in project_cols:
            cell = ws.cell(row=13, column=col_idx)
            cell.font = Font(bold=True)

        # row14插入各单项指标成绩得分等级汇总
        max_col = 18
        ws.merge_cells(start_row=14, start_column=1, end_row=14, end_column=max_col)
        title_cell = ws.cell(row=14, column=1)
        title_cell.value = "各单项指标成绩得分等级汇总"
        title_cell.font = Font(size=20, bold=True)
        title_cell.alignment = Alignment(horizontal="center")
        ws.row_dimensions[row].height = 33

    def add_class_student_data(self, ws, class_data):
        """添加班级学生数据"""
        # 获取年级信息来决定要显示的项目
        grade = class_data["年级"].iloc[0] if len(class_data) > 0 else ""

        # 学生数据表头（从第15行开始）
        headers = [
            "序号",
            "学号",
            "姓名",
            "性别",
            "单项指标",
            "体重指数（BMI）（千克/米²）",
            "肺活量（毫升）",
            "50米跑（秒）",
            "坐位体前屈（cm）",
            "一分钟跳绳（次）",
        ]

        # 根据年级添加相应的项目
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            headers.append("一分钟仰卧起坐（次）")
        else:
            headers.append("")

        if grade in ["五年级", "六年级"]:
            headers.append("50米×8往返跑（秒）")
        else:
            headers.append("")

        # 补齐到15列
        while len(headers) < 15:
            headers.append("")

        for cell in ws[15]:
            if cell.font:  # 保留原有字体大小，只加粗
                cell.font = Font(size=cell.font.size or 14, bold=True)
            else:
                cell.font = Font(size=14, bold=True)

        # 设置A到O列的表头
        for col, header in enumerate(headers, 1):
            ws.cell(row=15, column=col, value=header)

        # 设置Q、R列的表头（第17、18列）
        ws.cell(row=15, column=17, value="综合得分")
        ws.cell(row=15, column=18, value="综合等级")

        # 设置Q、R列表头的字体
        for col in [17, 18]:
            cell = ws.cell(row=15, column=col)
            cell.font = Font(size=14, bold=True)

        # 按综合得分从高到低排序学生数据
        class_data_sorted = class_data.sort_values(
            "综合得分", ascending=False
        ).reset_index(drop=True)

        # 添加学生数据
        row = 16
        student_seq = 1  # 班级内学生序号从1开始
        for idx, student in class_data_sorted.iterrows():
            start_row = row  # 记录当前学生的起始行

            # 基本信息行
            ws.cell(row=row, column=1, value=student_seq)  # 序号
            ws.cell(row=row, column=2, value=student.get("学号", ""))
            ws.cell(row=row, column=3, value=student.get("姓名", ""))
            ws.cell(row=row, column=4, value=student.get("性别", ""))
            ws.cell(row=row, column=5, value="成绩")

            # 各项成绩
            ws.cell(row=row, column=6, value=student.get("BMI", ""))
            ws.cell(row=row, column=7, value=student.get("肺活量(ml)", ""))
            ws.cell(row=row, column=8, value=student.get("50米跑(s)", ""))
            ws.cell(row=row, column=9, value=student.get("坐位体前屈(cm)", ""))
            ws.cell(row=row, column=10, value=student.get("一分钟跳绳(个）", ""))

            # 根据年级添加相应的项目成绩
            if grade in ["三年级", "四年级", "五年级", "六年级"]:
                ws.cell(row=row, column=11, value=student.get("一分钟仰卧起坐(个)", ""))
            if grade in ["五年级", "六年级"]:
                ws.cell(row=row, column=12, value=student.get("50米×8往返跑(s)", ""))

            row += 1

            # 得分行
            ws.cell(row=row, column=5, value="得分")
            ws.cell(row=row, column=6, value=student.get("BMI得分", ""))
            ws.cell(row=row, column=7, value=student.get("肺活量得分", ""))
            ws.cell(row=row, column=8, value=student.get("50米跑得分", ""))
            ws.cell(row=row, column=9, value=student.get("坐位体前屈得分", ""))
            ws.cell(row=row, column=10, value=student.get("跳绳得分", ""))

            # 根据年级添加相应的项目得分
            if grade in ["三年级", "四年级", "五年级", "六年级"]:
                ws.cell(row=row, column=11, value=student.get("仰卧起坐得分", ""))
            if grade in ["五年级", "六年级"]:
                ws.cell(row=row, column=12, value=student.get("往返跑得分", ""))

            row += 1

            # 等级行
            ws.cell(row=row, column=5, value="等级")
            ws.cell(row=row, column=6, value=student.get("BMI等级", ""))
            ws.cell(row=row, column=7, value=student.get("肺活量等级", ""))
            ws.cell(row=row, column=8, value=student.get("50米跑等级", ""))
            ws.cell(row=row, column=9, value=student.get("坐位体前屈等级", ""))
            ws.cell(row=row, column=10, value=student.get("跳绳等级", ""))

            # 根据年级添加相应的项目等级
            if grade in ["三年级", "四年级", "五年级", "六年级"]:
                ws.cell(row=row, column=11, value=student.get("仰卧起坐等级", ""))
            if grade in ["五年级", "六年级"]:
                ws.cell(row=row, column=12, value=student.get("往返跑等级", ""))
            row += 1

            # 在Q、R列（第17、18列）合并三行并写入综合得分和等级
            end_row = start_row + 2  # 三行：start_row, start_row+1, start_row+2

            # 合并Q列（第17列）的三行
            ws.merge_cells(
                start_row=start_row, start_column=17, end_row=end_row, end_column=17
            )
            comprehensive_score = student.get("综合得分", "")
            ws.cell(row=start_row, column=17, value=comprehensive_score)
            ws.cell(row=start_row, column=17).alignment = Alignment(
                horizontal="center", vertical="center"
            )

            # 合并R列（第18列）的三行
            ws.merge_cells(
                start_row=start_row, start_column=18, end_row=end_row, end_column=18
            )
            ws.cell(row=start_row, column=18, value=student.get("综合等级", ""))
            ws.cell(row=start_row, column=18).alignment = Alignment(
                horizontal="center", vertical="center"
            )

            student_seq += 1  # 序号递增，为下一个学生做准备

    def create_grade_summary(self, grade_data, grade):
        """创建年级汇总表"""
        wb = Workbook()
        ws = wb.active
        ws.title = "初中，高中，大学级"

        # 动态计算标题合并范围
        title_max_col = 11  # K列是基础的
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            title_max_col += 1  # 添加仰卧起坐列
        if grade in ["五年级", "六年级"]:
            title_max_col += 1  # 添加往返跑列
        title_max_col += 1  # 最后的综合等级列

        # 设置标题
        ws["A1"] = "年级综合评级人数汇总统计"
        ws.merge_cells(f"A1:{get_column_letter(title_max_col)}1")
        ws["A1"].font = Font(bold=True, size=14)
        ws["A1"].alignment = Alignment(horizontal="center")

        # 年级信息行
        ws["A2"] = "年级名称："
        ws["D2"] = grade
        ws["G2"] = "测评人："
        ws["L2"] = self.today
        # ws['P2'] = "九江伍玖陆壹软件：19070256136"

        # 统计数据
        total_students = len(grade_data)
        male_count = len(grade_data[grade_data["性别"] == "男"])
        female_count = len(grade_data[grade_data["性别"] == "女"])

        # 计算年级统计
        grade_stats = self.calculate_statistics(grade_data)

        # 添加年级统计
        self.add_grade_statistics(
            ws, male_count, female_count, total_students, grade_stats, grade
        )

        # --- 为年级汇总表添加表格边框：第2行开始，A到动态列数 ---
        min_row = 2
        max_row = 13  # 到第13行
        min_col = 1  # A列
        # 动态计算最大列数
        max_col = 11  # K列是基础的
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            max_col += 1  # 添加仰卧起坐列
        if grade in ["五年级", "六年级"]:
            max_col += 1  # 添加往返跑列
        max_col += 1  # 最后的综合等级列

        # 定义边框样式
        thin_side = Side(style="thin")
        medium_side = Side(style="medium")

        # 先给所有单元格加细边框
        for row in ws.iter_rows(
            min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col
        ):
            for cell in row:
                cell.border = Border(
                    left=thin_side, right=thin_side, top=thin_side, bottom=thin_side
                )

        # 再加强外框：只加粗最外一圈的边
        # 左边框（A列）
        for row_idx in range(min_row, max_row + 1):
            cell = ws.cell(row=row_idx, column=min_col)
            old_border = cell.border
            cell.border = Border(
                left=medium_side,
                right=old_border.right,
                top=old_border.top,
                bottom=old_border.bottom,
            )

        # 右边框（R列）
        for row_idx in range(min_row, max_row + 1):
            cell = ws.cell(row=row_idx, column=max_col)
            old_border = cell.border
            cell.border = Border(
                left=old_border.left,
                right=medium_side,
                top=old_border.top,
                bottom=old_border.bottom,
            )

        # 上边框（第3行）
        for col_idx in range(min_col, max_col + 1):
            cell = ws.cell(row=min_row, column=col_idx)
            old_border = cell.border
            cell.border = Border(
                left=old_border.left,
                right=old_border.right,
                top=medium_side,
                bottom=old_border.bottom,
            )

        # 下边框（最后一行）
        for col_idx in range(min_col, max_col + 1):
            cell = ws.cell(row=max_row, column=col_idx)
            old_border = cell.border
            cell.border = Border(
                left=old_border.left,
                right=old_border.right,
                top=old_border.top,
                bottom=medium_side,
            )

        # --- 设置格式：居中、加粗、行高、列宽 ---
        min_row = 2
        max_row = 13
        min_col = 1
        # 使用之前动态计算的max_col值

        # 定义居中加粗的样式
        center_bold_font = Font(bold=True, name="Calibri")
        center_alignment = Alignment(horizontal="center", vertical="center")

        # 遍历所有数据区域（第3行开始）
        for row_idx in range(min_row, max_row + 1):
            # 设置行高
            ws.row_dimensions[row_idx].height = 25

            for col_idx in range(min_col, max_col + 1):
                cell = ws.cell(row=row_idx, column=col_idx)
                # 设置字体加粗和Calibri字体
                if cell.font:
                    cell.font = Font(bold=True, sz=cell.font.sz, name="Calibri")
                else:
                    cell.font = center_bold_font
                # 设置居中
                cell.alignment = center_alignment

        # 设置列宽（根据新的布局要求）
        # ABCD列设置为10宽度
        for col_letter in ["A", "B", "C", "D"]:
            ws.column_dimensions[col_letter].width = 10

        # E到最大列都设置为17宽度
        for col_idx in range(5, max_col + 1):  # E列开始
            col_letter = get_column_letter(col_idx)
            ws.column_dimensions[col_letter].width = 17

        ws.column_dimensions["L"].width = 21

        print(
            f"✅ 已设置数据区域格式：居中、加粗、行高25、ABCD栏宽度10、E到{get_column_letter(max_col)}栏宽度17，字体Calibri"
        )

        return wb

    def add_grade_statistics(
        self, ws, male_count, female_count, total_count, stats, grade
    ):
        """添加年级统计信息"""
        # 合并第二行AB
        ws.merge_cells("A2:B2")
        ws["A2"] = "年级名称："

        # 合并C2和D2，年级名称 (动态设置)
        ws.merge_cells("C2:D2")
        ws["C2"] = grade

        # 合并J2:K2来显示"本次体测日期："
        ws.merge_cells("J2:K2")
        ws["J2"] = "本次体测日期："
        ws["J2"].font = Font(size=11, name="Calibri")
        # 根据年级设置测试日期
        ws["L2"] = "2025/09/23-2025/09/24"

        # 第3行表头
        ws["C3"] = "男"
        ws["D3"] = "女"
        ws["E3"] = "总人数"
        ws["G3"] = "综合等级"
        ws["H3"] = "评分a"
        ws["I3"] = "男"
        ws["J3"] = "女"
        ws["K3"] = "合计"
        ws["L3"] = "占比率%"

        # 合并第4-6行AB
        ws.merge_cells("A4:B4")
        ws["A4"] = "应查人数"
        ws["C4"] = male_count
        ws["D4"] = female_count
        ws["E4"] = total_count

        ws.merge_cells("A5:B5")
        ws["A5"] = "实查人数"
        ws["C5"] = stats.get("tested_male", 0)
        ws["D5"] = stats.get("tested_female", 0)
        ws["E5"] = stats.get("tested_total", 0)

        ws.merge_cells("A6:B6")
        ws["A6"] = "实查比率%"
        ws["C6"] = stats.get("male_ratio", "0%")
        ws["D6"] = stats.get("female_ratio", "0%")
        ws["E6"] = stats.get("total_ratio", "0%")

        # 使用真实的等级统计
        excellent_count = stats["excellent_total"]
        good_count = stats["good_total"]
        pass_count = stats["pass_total"]
        fail_count = stats["fail_total"]

        # 等级统计（右侧）
        ws["G4"] = "一级（优秀）"
        ws["H4"] = "a ≥ 90.0 分"
        ws["I4"] = stats.get("excellent_male", 0)
        ws["J4"] = stats.get("excellent_female", 0)
        ws["K4"] = excellent_count
        if total_count > 0:
            ws["L4"] = f"{round(excellent_count/total_count*100)}%"

        ws["G5"] = "二级（良好）"
        ws["H5"] = "80.0分≤a< 90.0分"
        ws["I5"] = stats.get("good_male", 0)
        ws["J5"] = stats.get("good_female", 0)
        ws["K5"] = good_count
        if total_count > 0:
            ws["L5"] = f"{round(good_count/total_count*100)}%"

        ws["G6"] = "三级（及格）"
        ws["H6"] = "60 .0分≤a< 80.0分"
        ws["I6"] = stats.get("pass_male", 0)
        ws["J6"] = stats.get("pass_female", 0)
        ws["K6"] = pass_count
        if total_count > 0:
            ws["L6"] = f"{round(pass_count/total_count*100)}%"

        ws["G7"] = "四级（不及格）"
        ws["H7"] = "a < 60.0 分"
        ws["I7"] = stats.get("fail_male", 0)
        ws["J7"] = stats.get("fail_female", 0)
        ws["K7"] = fail_count
        if total_count > 0:
            ws["L7"] = f"{round(fail_count/total_count*100)}%"

        # 各单项统计（第8-13行）
        # 合并第8-13行A到D列成一个大方块
        ws.merge_cells("A8:D13")
        ws["A8"] = "各单项实查评价人数统计"

        ws["E8"] = "等级"
        ws["F8"] = "评分a"
        ws["G8"] = "体重指数（BMI）"
        ws["H8"] = "肺活量"
        ws["I8"] = "50米跑"
        ws["J8"] = "坐位体前屈"
        ws["K8"] = "一分钟跳绳"

        # 根据年级动态添加项目标题
        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(row=8, column=col_idx, value="一分钟仰卧起坐")
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(row=8, column=col_idx, value="50米×8往返跑")
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1

        # 最后一列为综合等级
        cell = ws.cell(row=8, column=col_idx, value="综合等级")
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # 第9行不再合并A-D（因为A8:D13已经是一个大方块了）
        ws["E9"] = "一级（优秀）"
        ws["F9"] = "a ≥ 90.0 分"
        ws["G9"] = stats.get("BMI_excellent", 0)
        ws["H9"] = stats.get("肺活量_excellent", 0)
        ws["I9"] = stats.get("50米跑_excellent", 0)
        ws["J9"] = stats.get("坐位体前屈_excellent", 0)
        ws["K9"] = stats.get("跳绳_excellent", 0)

        # 根据年级动态添加数据
        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(
                row=9, column=col_idx, value=stats.get("仰卧起坐_excellent", 0)
            )
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(
                row=9, column=col_idx, value=stats.get("往返跑_excellent", 0)
            )
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        # 最后一列为综合等级
        cell = ws.cell(row=9, column=col_idx, value=excellent_count)
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # 第10行
        ws["E10"] = "二级（良好）"
        ws["F10"] = "80.0分≤a< 90.0分"
        ws["G10"] = stats.get("BMI_good", 0)
        ws["H10"] = stats.get("肺活量_good", 0)
        ws["I10"] = stats.get("50米跑_good", 0)
        ws["J10"] = stats.get("坐位体前屈_good", 0)
        ws["K10"] = stats.get("跳绳_good", 0)

        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(row=10, column=col_idx, value=stats.get("仰卧起坐_good", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(row=10, column=col_idx, value=stats.get("往返跑_good", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        cell = ws.cell(row=10, column=col_idx, value=good_count)
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # 第11行
        ws["E11"] = "三级（及格）"
        ws["F11"] = "60.0分≤a< 80.0分"
        ws["G11"] = stats.get("BMI_pass", 0)
        ws["H11"] = stats.get("肺活量_pass", 0)
        ws["I11"] = stats.get("50米跑_pass", 0)
        ws["J11"] = stats.get("坐位体前屈_pass", 0)
        ws["K11"] = stats.get("跳绳_pass", 0)

        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(row=11, column=col_idx, value=stats.get("仰卧起坐_pass", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(row=11, column=col_idx, value=stats.get("往返跑_pass", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        cell = ws.cell(row=11, column=col_idx, value=pass_count)
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # 第12行
        ws["E12"] = "四级（不及格）"
        ws["F12"] = "a < 60.0 分"
        ws["G12"] = stats.get("BMI_fail", 0)
        ws["H12"] = stats.get("肺活量_fail", 0)
        ws["I12"] = stats.get("50米跑_fail", 0)
        ws["J12"] = stats.get("坐位体前屈_fail", 0)
        ws["K12"] = stats.get("跳绳_fail", 0)

        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(row=12, column=col_idx, value=stats.get("仰卧起坐_fail", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(row=12, column=col_idx, value=stats.get("往返跑_fail", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        cell = ws.cell(row=12, column=col_idx, value=fail_count)
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

        # 第13行，合并E13和F13
        ws.merge_cells("E13:F13")
        ws["E13"] = "单项实查人数合计"
        ws["G13"] = stats.get("tested_total", 0)
        ws["H13"] = stats.get("tested_total", 0)
        ws["I13"] = stats.get("tested_total", 0)
        ws["J13"] = stats.get("tested_total", 0)
        ws["K13"] = stats.get("tested_total", 0)

        # 根据年级动态添加第13行数据
        col_idx = 12  # L列
        if grade in ["三年级", "四年级", "五年级", "六年级"]:
            cell = ws.cell(row=13, column=col_idx, value=stats.get("tested_total", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        if grade in ["五年级", "六年级"]:
            cell = ws.cell(row=13, column=col_idx, value=stats.get("tested_total", 0))
            cell.font = Font(bold=True, name="Calibri")
            cell.alignment = Alignment(horizontal="center", vertical="center")
            col_idx += 1
        # 最后一列为总人数
        cell = ws.cell(row=13, column=col_idx, value=total_count)
        cell.font = Font(bold=True, name="Calibri")
        cell.alignment = Alignment(horizontal="center", vertical="center")

    def process_grade_classes(self, grade_data, grade):
        """处理年级下的各个班级数据"""
        # 按班级分组
        class_groups = grade_data.groupby("班级名称")

        print(f"{grade}共有 {len(class_groups)} 个班级")

        for class_name, class_data in class_groups:
            try:
                # 提取班级号（例如：从"六年级10班"提取"10"）
                import re

                match = re.search(r"([一二三四五六]年级)?(\d+)班", class_name)
                if match:
                    class_num = match.group(2)
                    # 创建简化的班级名称（例如：六10班）
                    grade_map = {
                        "一年级": "一",
                        "二年级": "二",
                        "三年级": "三",
                        "四年级": "四",
                        "五年级": "五",
                        "六年级": "六",
                    }
                    grade_short = grade_map.get(grade, grade)
                    simple_class_name = f"{grade_short}{class_num}班"
                else:
                    # 如果无法匹配，使用完整班级名称
                    class_num = class_name.replace("班", "")
                    simple_class_name = class_name

                print(f"处理{class_name}，共{len(class_data)}名学生")

                # 创建班级汇总表
                wb = self.create_class_summary(class_data, grade, class_num)

                # 保存班级汇总表（使用简化的班级名称）
                class_filename = f"{simple_class_name}_班级统计汇总表.xlsx"
                class_filepath = os.path.join(self.output_dir, grade, class_filename)

                wb.save(class_filepath)
                # print(f"✅ 保存班级汇总表: {class_filepath}")

            except Exception as e:
                print(f"❌ 处理{class_name}时出错: {e}")
                continue

    def process_all_grades(self):
        print("=== 开始处理年级和班级数据 ===")

        # 加载学生数据
        student_data = self.load_student_data()
        if student_data.empty:
            print("没有找到学生数据，退出处理")
            return

        # 创建年级文件夹
        grades = self.create_directories(student_data)

        # 按年级分组处理
        for grade in grades:
            print(f"\n=== 处理{grade}数据 ===")

            grade_data = student_data[student_data["年级"] == grade]
            if grade_data.empty:
                print(f"{grade}没有数据，跳过")
                continue

            print(f"{grade}共有 {len(grade_data)} 名学生")

            # 创建年级汇总表，并接收返回的 workbook
            print(f"创建{grade}年级汇总表...")
            wb = self.create_grade_summary(grade_data, grade)  # 必须用 wb 接收！

            # 保存到 对应年级 子文件夹中
            grade_filename = f"{grade}统计汇总表.xlsx"
            grade_filepath = os.path.join(self.output_dir, grade, grade_filename)

            try:
                wb.save(grade_filepath)
                print(f"✅ 保存年级汇总表: {grade_filepath}")
            except PermissionError:
                alt_filename = f"{grade}_年级统计汇总表_{datetime.now().strftime('%Y%m%d')}_new.xlsx"
                alt_filepath = os.path.join(self.output_dir, grade, alt_filename)
                wb.save(alt_filepath)
                print(f"✅ 保存年级汇总表 (备用名): {alt_filepath}")

            # ✅ 创建各班级汇总表
            print(f"创建{grade}各班级汇总表...")
            self.process_grade_classes(grade_data, grade)

        print("\n=== 所有年级和班级汇总表已生成完毕 ===")


def parse_arguments():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(description="处理体测成绩数据")
    parser.add_argument("--filter", "-f", type=str, help="年级班级过滤参数 (JSON格式)")
    parser.add_argument("--input-file", "-i", type=str, help="输入文件路径")
    parser.add_argument("--output-dir", "-o", type=str, help="输出目录路径")
    return parser.parse_args()


def output_response(status, message, data=None):
    """输出结构化响应"""
    response = {
        "status": status,  # "success" or "error"
        "message": message,
        "timestamp": datetime.now().isoformat(),
    }
    if data is not None:
        response["data"] = data

    print(json.dumps(response, ensure_ascii=False))
    sys.stdout.flush()


def main():
    """
    命令行使用示例:

    # 1. 处理所有数据（默认行为）
    python form_and_class.py

    # 2. 只处理四年级的1班和2班
    python form_and_class.py --filter '{"四年级": ["1班", "2班"]}'

    # 3. 处理四年级的1班和2班，以及六年级的所有班级
    python form_and_class.py --filter '{"四年级": ["1班", "2班"], "六年级": []}'

    # 4. 处理多个年级的特定班级
    python form_and_class.py --filter '{"三年级": ["1班", "3班", "5班"], "四年级": ["2班", "4班"], "五年级": []}'

    # 5. 指定输入文件和输出目录
    python form_and_class.py --input-file "data.xlsx" --output-dir "output" --filter '{"四年级": ["1班", "2班"]}'
    """

    try:
        # 解析命令行参数
        args = parse_arguments()

        # 解析过滤参数
        year_class_filter = None
        if args.filter:
            try:
                year_class_filter = json.loads(args.filter)
            except json.JSONDecodeError as e:
                output_response("error", f"过滤参数JSON格式错误: {e}")
                sys.exit(1)

        # 创建处理器
        processor = GradeClassProcessor(year_class_filter=year_class_filter)

        # 如果指定了输入文件，更新处理器
        if args.input_file:
            processor.input_file = args.input_file

        # 如果指定了输出目录，更新处理器
        if args.output_dir:
            processor.output_dir = args.output_dir

        # 输出开始处理信息
        output_response(
            "success",
            "开始处理体测成绩数据",
            {
                "input_file": processor.input_file,
                "output_dir": processor.output_dir,
                "filter": year_class_filter,
            },
        )

        # 处理数据
        processor.process_all_grades()

        # 输出成功信息
        output_response(
            "success",
            "体测成绩数据处理完成",
            {"output_directory": processor.output_dir},
        )

    except ValueError as e:
        output_response("error", f"参数验证错误: {e}")
        sys.exit(1)
    except FileNotFoundError as e:
        output_response("error", f"文件未找到: {e}")
        sys.exit(1)
    except PermissionError as e:
        output_response("error", f"权限错误: {e}")
        sys.exit(1)
    except Exception as e:
        output_response("error", f"处理过程中发生错误: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

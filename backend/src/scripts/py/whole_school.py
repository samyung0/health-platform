#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
基于国家学生体质健康标准的体测数据转换脚本
完全按照国家标准（2014年修订）进行评分和等级计算
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime
import math

class NationalStandardConverter:
    """基于国家标准的体测数据转换器"""
    
    def __init__(self):
        """初始化转换器，设置国家标准评分表和权重"""
        self.setup_national_standards()
    
    def setup_national_standards(self):
        """设置国家标准评分表和权重"""
        
        # 根据文档设置各年级权重（标准.md第65-79行）
        self.weights = {
            '一年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.30, '跳绳': 0.20},
            '二年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.30, '跳绳': 0.20},
            '三年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.20, '跳绳': 0.20, '仰卧起坐': 0.10},
            '四年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.20, '跳绳': 0.20, '仰卧起坐': 0.10},
            '五年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.10, '跳绳': 0.10, '仰卧起坐': 0.20, '往返跑': 0.10},
            '六年级': {'BMI': 0.15, '肺活量': 0.15, '50米跑': 0.20, '坐位体前屈': 0.10, '跳绳': 0.10, '仰卧起坐': 0.20, '往返跑': 0.10}
        }
        
        # BMI评分标准（根据标准文档表1-1、1-2）
        self.bmi_standards = {
            '男': {
                '一年级': {'正常': (13.5, 18.1), '低体重': (0, 13.4), '超重': (18.2, 20.3), '肥胖': (20.4, 50)},
                '二年级': {'正常': (13.7, 18.4), '低体重': (0, 13.6), '超重': (18.5, 20.4), '肥胖': (20.5, 50)},
                '三年级': {'正常': (13.9, 19.4), '低体重': (0, 13.8), '超重': (19.5, 22.1), '肥胖': (22.2, 50)},
                '四年级': {'正常': (14.2, 20.1), '低体重': (0, 14.1), '超重': (20.2, 22.6), '肥胖': (22.7, 50)},
                '五年级': {'正常': (14.4, 21.4), '低体重': (0, 14.3), '超重': (21.5, 24.1), '肥胖': (24.2, 50)},
                '六年级': {'正常': (14.7, 21.8), '低体重': (0, 14.6), '超重': (21.9, 24.5), '肥胖': (24.6, 50)}
            },
            '女': {
                '一年级': {'正常': (13.3, 17.3), '低体重': (0, 13.2), '超重': (17.4, 19.2), '肥胖': (19.3, 50)},
                '二年级': {'正常': (13.5, 17.8), '低体重': (0, 13.4), '超重': (17.9, 20.2), '肥胖': (20.3, 50)},
                '三年级': {'正常': (13.6, 18.6), '低体重': (0, 13.5), '超重': (18.7, 21.1), '肥胖': (21.2, 50)},
                '四年级': {'正常': (13.7, 19.4), '低体重': (0, 13.6), '超重': (19.5, 22.0), '肥胖': (22.1, 50)},
                '五年级': {'正常': (13.8, 20.5), '低体重': (0, 13.7), '超重': (20.6, 22.9), '肥胖': (23.0, 50)},
                '六年级': {'正常': (14.2, 20.8), '低体重': (0, 14.1), '超重': (20.9, 23.6), '肥胖': (23.7, 50)}
            }
        }
        
        # 肺活量评分标准（完全按照标准.md表1-3、1-4）
        self.lung_standards = {
            '男': {
                '一年级': [
                    (1700, 100), (1600, 95), (1500, 90), (1400, 85), (1300, 80),
                    (1240, 78), (1180, 76), (1120, 74), (1060, 72), (1000, 70),
                    (940, 68), (880, 66), (820, 64), (760, 62), (700, 60),
                    (660, 50), (620, 40), (580, 30), (540, 20), (500, 10)
                ],
                '二年级': [
                    (2000, 100), (1900, 95), (1800, 90), (1650, 85), (1500, 80),
                    (1430, 78), (1360, 76), (1290, 74), (1220, 72), (1150, 70),
                    (1080, 68), (1010, 66), (940, 64), (870, 62), (800, 60),
                    (750, 50), (700, 40), (650, 30), (600, 20), (550, 10)
                ],
                '三年级': [
                    (2300, 100), (2200, 95), (2100, 90), (1900, 85), (1700, 80),
                    (1620, 78), (1540, 76), (1460, 74), (1380, 72), (1300, 70),
                    (1220, 68), (1140, 66), (1060, 64), (980, 62), (900, 60),
                    (840, 50), (780, 40), (720, 30), (660, 20), (600, 10)
                ],
                '四年级': [
                    (2600, 100), (2500, 95), (2400, 90), (2150, 85), (1900, 80),
                    (1820, 78), (1740, 76), (1660, 74), (1580, 72), (1500, 70),
                    (1420, 68), (1340, 66), (1260, 64), (1180, 62), (1100, 60),
                    (1030, 50), (960, 40), (890, 30), (820, 20), (750, 10)
                ],
                '五年级': [
                    (2900, 100), (2800, 95), (2700, 90), (2450, 85), (2200, 80),
                    (2110, 78), (2020, 76), (1930, 74), (1840, 72), (1750, 70),
                    (1660, 68), (1570, 66), (1480, 64), (1390, 62), (1300, 60),
                    (1220, 50), (1140, 40), (1060, 30), (980, 20), (900, 10)
                ],
                '六年级': [
                    (3200, 100), (3100, 95), (3000, 90), (2750, 85), (2500, 80),
                    (2400, 78), (2300, 76), (2200, 74), (2100, 72), (2000, 70),
                    (1900, 68), (1800, 66), (1700, 64), (1600, 62), (1500, 60),
                    (1410, 50), (1320, 40), (1230, 30), (1140, 20), (1050, 10)
                ]
            },
            '女': {
                '一年级': [
                    (1400, 100), (1300, 95), (1200, 90), (1100, 85), (1000, 80),
                    (960, 78), (920, 76), (880, 74), (840, 72), (800, 70),
                    (760, 68), (720, 66), (680, 64), (640, 62), (600, 60),
                    (580, 50), (560, 40), (540, 30), (520, 20), (500, 10)
                ],
                '二年级': [
                    (1600, 100), (1500, 95), (1400, 90), (1300, 85), (1200, 80),
                    (1150, 78), (1100, 76), (1050, 74), (1000, 72), (950, 70),
                    (900, 68), (850, 66), (800, 64), (750, 62), (700, 60),
                    (680, 50), (660, 40), (640, 30), (620, 20), (600, 10)
                ],
                '三年级': [
                    (1800, 100), (1700, 95), (1600, 90), (1500, 85), (1400, 80),
                    (1340, 78), (1280, 76), (1220, 74), (1160, 72), (1100, 70),
                    (1040, 68), (980, 66), (920, 64), (860, 62), (800, 60),
                    (780, 50), (760, 40), (740, 30), (720, 20), (700, 10)
                ],
                '四年级': [
                    (2000, 100), (1900, 95), (1800, 90), (1700, 85), (1600, 80),
                    (1530, 78), (1460, 76), (1390, 74), (1320, 72), (1250, 70),
                    (1180, 68), (1110, 66), (1040, 64), (970, 62), (900, 60),
                    (880, 50), (860, 40), (840, 30), (820, 20), (800, 10)
                ],
                '五年级': [
                    (2250, 100), (2150, 95), (2050, 90), (1950, 85), (1850, 80),
                    (1770, 78), (1690, 76), (1610, 74), (1530, 72), (1450, 70),
                    (1370, 68), (1290, 66), (1210, 64), (1130, 62), (1050, 60),
                    (1020, 50), (990, 40), (960, 30), (930, 20), (900, 10)
                ],
                '六年级': [
                    (2500, 100), (2400, 95), (2300, 90), (2200, 85), (2100, 80),
                    (2010, 78), (1920, 76), (1830, 74), (1740, 72), (1650, 70),
                    (1560, 68), (1470, 66), (1380, 64), (1290, 62), (1200, 60),
                    (1170, 50), (1140, 40), (1110, 30), (1080, 20), (1050, 10)
                ]
            }
        }
        
        # 50米跑评分标准（表1-5、1-6）- 时间越少分数越高
        self.run50_standards = {
            '男': {
                '一年级': [
                    (10.2, 100), (10.3, 95), (10.4, 90), (10.5, 85), (10.6, 80),
                    (10.8, 78), (11.0, 76), (11.2, 74), (11.4, 72), (11.6, 70),
                    (11.8, 68), (12.0, 66), (12.2, 64), (12.4, 62), (12.6, 60),
                    (12.8, 50), (13.0, 40), (13.2, 30), (13.4, 20), (13.6, 10)
                ],
                '二年级': [
                    (9.6, 100), (9.7, 95), (9.8, 90), (9.9, 85), (10.0, 80),
                    (10.2, 78), (10.4, 76), (10.6, 74), (10.8, 72), (11.0, 70),
                    (11.2, 68), (11.4, 66), (11.6, 64), (11.8, 62), (12.0, 60),
                    (12.2, 50), (12.4, 40), (12.6, 30), (12.8, 20), (13.0, 10)
                ],
                '三年级': [
                    (9.1, 100), (9.2, 95), (9.3, 90), (9.4, 85), (9.5, 80),
                    (9.7, 78), (9.9, 76), (10.1, 74), (10.3, 72), (10.5, 70),
                    (10.7, 68), (10.9, 66), (11.1, 64), (11.3, 62), (11.5, 60),
                    (11.7, 50), (11.9, 40), (12.1, 30), (12.3, 20), (12.5, 10)
                ],
                '四年级': [
                    (8.7, 100), (8.8, 95), (8.9, 90), (9.0, 85), (9.1, 80),
                    (9.3, 78), (9.5, 76), (9.7, 74), (9.9, 72), (10.1, 70),
                    (10.3, 68), (10.5, 66), (10.7, 64), (10.9, 62), (11.1, 60),
                    (11.3, 50), (11.5, 40), (11.7, 30), (11.9, 20), (12.1, 10)
                ],
                '五年级': [
                    (8.4, 100), (8.5, 95), (8.6, 90), (8.7, 85), (8.8, 80),
                    (9.0, 78), (9.2, 76), (9.4, 74), (9.6, 72), (9.8, 70),
                    (10.0, 68), (10.2, 66), (10.4, 64), (10.6, 62), (10.8, 60),
                    (11.0, 50), (11.2, 40), (11.4, 30), (11.6, 20), (11.8, 10)
                ],
                '六年级': [
                    (8.2, 100), (8.3, 95), (8.4, 90), (8.5, 85), (8.6, 80),
                    (8.8, 78), (9.0, 76), (9.2, 74), (9.4, 72), (9.6, 70),
                    (9.8, 68), (10.0, 66), (10.2, 64), (10.4, 62), (10.6, 60),
                    (10.8, 50), (11.0, 40), (11.2, 30), (11.4, 20), (11.6, 10)
                ]
            },
            '女': {
                '一年级': [
                    (11.0, 100), (11.1, 95), (11.2, 90), (11.5, 85), (11.8, 80),
                    (12.0, 78), (12.2, 76), (12.4, 74), (12.6, 72), (12.8, 70),
                    (13.0, 68), (13.2, 66), (13.4, 64), (13.6, 62), (13.8, 60),
                    (14.0, 50), (14.2, 40), (14.4, 30), (14.6, 20), (14.8, 10)
                ],
                '二年级': [
                    (10.0, 100), (10.1, 95), (10.2, 90), (10.5, 85), (10.8, 80),
                    (11.0, 78), (11.2, 76), (11.4, 74), (11.6, 72), (11.8, 70),
                    (12.0, 68), (12.2, 66), (12.4, 64), (12.6, 62), (12.8, 60),
                    (13.0, 50), (13.2, 40), (13.4, 30), (13.6, 20), (13.8, 10)
                ],
                '三年级': [
                    (9.2, 100), (9.3, 95), (9.4, 90), (9.7, 85), (10.0, 80),
                    (10.2, 78), (10.4, 76), (10.6, 74), (10.8, 72), (11.0, 70),
                    (11.2, 68), (11.4, 66), (11.6, 64), (11.8, 62), (12.0, 60),
                    (12.2, 50), (12.4, 40), (12.6, 30), (12.8, 20), (13.0, 10)
                ],
                '四年级': [
                    (8.7, 100), (8.8, 95), (8.9, 90), (9.2, 85), (9.5, 80),
                    (9.7, 78), (9.9, 76), (10.1, 74), (10.3, 72), (10.5, 70),
                    (10.7, 68), (10.9, 66), (11.1, 64), (11.3, 62), (11.5, 60),
                    (11.7, 50), (11.9, 40), (12.1, 30), (12.3, 20), (12.5, 10)
                ],
                '五年级': [
                    (8.3, 100), (8.4, 95), (8.5, 90), (8.8, 85), (9.1, 80),
                    (9.3, 78), (9.5, 76), (9.7, 74), (9.9, 72), (10.1, 70),
                    (10.3, 68), (10.5, 66), (10.7, 64), (10.9, 62), (11.1, 60),
                    (11.3, 50), (11.5, 40), (11.7, 30), (11.9, 20), (12.1, 10)
                ],
                '六年级': [
                    (8.2, 100), (8.3, 95), (8.4, 90), (8.7, 85), (9.0, 80),
                    (9.2, 78), (9.4, 76), (9.6, 74), (9.8, 72), (10.0, 70),
                    (10.2, 68), (10.4, 66), (10.6, 64), (10.8, 62), (11.0, 60),
                    (11.2, 50), (11.4, 40), (11.6, 30), (11.8, 20), (12.0, 10)
                ]
            }
        }
        
        # 坐位体前屈评分标准（表1-7、1-8）
        self.sitreach_standards = {
            '男': {
                '一年级': [
                    (16.1, 100), (14.6,  95), (13.0,  90), (12.0,  85), (11.0,  80),
                    (9.9,  78),  (8.8,  76),  (7.7,  74),  (6.6,  72),  (5.5,  70),
                    (4.4,  68),  (3.3,  66),  (2.2,  64),  (1.1,  62),  (0.0,  60),
                    (-0.8, 50),  (-1.6, 40),  (-2.4, 30),  (-3.2, 20),  (-4.0, 10)
                ],
                '二年级': [
                    (16.2, 100), (14.7,  95), (13.2,  90), (11.9,  85), (10.6,  80),
                    (9.5,  78),  (8.4,  76),  (7.3,  74),  (6.2,  72),  (5.1,  70),
                    (4.0,  68),  (2.9,  66),  (1.8,  64),  (0.7,  62),  (-0.4, 60),
                    (-1.2, 50),  (-2.0, 40),  (-2.8, 30),  (-3.6, 20),  (-4.4, 10)
                ],
                '三年级': [
                    (16.3, 100), (14.9,  95), (13.4,  90), (11.8,  85), (10.2,  80),
                    (9.1,  78),  (8.0,  76),  (6.9,  74),  (5.8,  72),  (4.7,  70),
                    (3.6,  68),  (2.5,  66),  (1.4,  64),  (0.3,  62),  (-0.8, 60),
                    (-1.6, 50),  (-2.4, 40),  (-3.2, 30),  (-4.0, 20),  (-4.8, 10)
                ],
                '四年级': [
                    (16.4, 100), (15.0,  95), (13.6,  90), (11.7,  85), (9.8,   80),
                    (8.6,  78),  (7.4,  76),  (6.2,  74),  (5.0,  72),  (3.8,  70),
                    (2.6,  68),  (1.4,  66),  (0.2,  64),  (-1.0, 62), (-2.2, 60),
                    (-3.2, 50),  (-4.2, 40),  (-5.2, 30),  (-6.2, 20),  (-7.2, 10)
                ],
                '五年级': [
                    (16.5, 100), (15.2,  95), (13.8,  90), (11.6,  85), (9.4,   80),
                    (8.2,  78),  (7.0,  76),  (5.8,  74),  (4.6,  72),  (3.4,  70),
                    (2.2,  68),  (1.0,  66),  (-0.2, 64), (-1.4, 62), (-2.6, 60),
                    (-3.6, 50),  (-4.6, 40),  (-5.6, 30),  (-6.6, 20),  (-7.6, 10)
                ],
                '六年级': [
                    (16.6, 100), (15.3,  95), (14.0,  90), (11.5,  85), (9.0,   80),
                    (7.7,  78),  (6.4,  76),  (5.1,  74),  (3.8,  72),  (2.5,  70),
                    (1.2,  68),  (-0.1, 66), (-1.4, 64), (-2.7, 62), (-4.0, 60),
                    (-5.0, 50),  (-6.0, 40),  (-7.0, 30),  (-8.0, 20),  (-9.0, 10)
                ]
            },
            '女': {
                '一年级': [
                    (18.6, 100), (17.3, 95),  (16.0, 90),  (14.7, 85),  (13.4, 80),
                    (12.3, 78),  (11.2, 76),  (10.1, 74),  (9.0,  72),  (7.9,  70),
                    (6.8,  68),  (5.7,  66),  (4.6,  64),  (3.5,  62),  (2.4,  60),
                    (1.6,  50),  (0.8,  40),  (0.0,  30),  (-0.8, 20),  (-1.6, 10)
                ],
                '二年级': [
                    (18.9, 100), (17.6, 95),  (16.3, 90),  (14.8, 85),  (13.3, 80),
                    (12.2, 78),  (11.1, 76),  (10.0, 74),  (8.9,  72),  (7.8,  70),
                    (6.7,  68),  (5.6,  66),  (4.5,  64),  (3.4,  62),  (2.3,  60),
                    (1.5,  50),  (0.7,  40),  (-0.1, 30),  (-0.9, 20),  (-1.7, 10)
                ],
                '三年级': [
                    (19.2, 100), (17.9, 95),  (16.6, 90),  (14.9, 85),  (13.2, 80),
                    (12.1, 78),  (11.0, 76),  (9.9,  74),  (8.8,  72),  (7.7,  70),
                    (6.6,  68),  (5.5,  66),  (4.4,  64),  (3.3,  62),  (2.2,  60),
                    (1.4,  50),  (0.6,  40),  (-0.2, 30),  (-1.0, 20),  (-1.8, 10)
                ],
                '四年级': [
                    (19.5, 100), (18.1, 95),  (16.9, 90),  (15.0, 85),  (13.1, 80),
                    (12.0, 78),  (10.9, 76),  (9.8,  74),  (8.7,  72),  (7.6,  70),
                    (6.5,  68),  (5.4,  66),  (4.3,  64),  (3.2,  62),  (2.1,  60),
                    (1.3,  50),  (0.5,  40),  (-0.3, 30),  (-1.1, 20),  (-1.9, 10)
                ],
                '五年级': [
                    (19.8, 100), (18.5, 95),  (17.2, 90),  (15.1, 85),  (13.0, 80),
                    (11.9, 78),  (10.8, 76),  (9.7,  74),  (8.6,  72),  (7.5,  70),
                    (6.4,  68),  (5.3,  66),  (4.2,  64),  (3.1,  62),  (2.0,  60),
                    (1.2,  50),  (0.4,  40),  (-0.4, 30),  (-1.2, 20),  (-2.0, 10)
                ],
                '六年级': [
                    (19.9, 100), (18.7, 95),  (17.5, 90),  (15.2, 85),  (12.9, 80),
                    (11.8, 78),  (10.7, 76),  (9.6,  74),  (8.5,  72),  (7.4,  70),
                    (6.3,  68),  (5.2,  66),  (4.1,  64),  (3.0,  62),  (1.9,  60),
                    (1.1,  50),  (0.3,  40),  (-0.5, 30),  (-1.3, 20),  (-2.1, 10)
                ]
            }
        }
        # 跳绳评分标准（表1-9、1-10）
        self.rope_standards = {
            '男': {
                '一年级': [
                    (109, 100), (104, 95),  (99,  90),  (93,  85),  (87,  80),
                    (80,  78),  (73,  76),  (66,  74),  (59,  72),  (52,  70),
                    (45,  68),  (38,  66),  (31,  64),  (24,  62),  (17,  60),
                    (14,  50),  (11,  40),  (8,   30),  (5,   20),  (2,   10)
                ],
                '二年级': [
                    (117, 100), (112, 95),  (107, 90),  (101, 85),  (95,  80),
                    (88,  78),  (81,  76),  (74,  74),  (67,  72),  (60,  70),
                    (53,  68),  (46,  66),  (39,  64),  (32,  62),  (25,  60),
                    (22,  50),  (19,  40),  (16,  30),  (13,  20),  (10,  10)
                ],
                '三年级': [
                    (126, 100), (121, 95),  (116, 90),  (110, 85),  (104, 80),
                    (97,  78),  (90,  76),  (83,  74),  (76,  72),  (69,  70),
                    (62,  68),  (55,  66),  (48,  64),  (41,  62),  (34,  60),
                    (31,  50),  (28,  40),  (25,  30),  (22,  20),  (19,  10)
                ],
                '四年级': [
                    (137, 100), (132, 95),  (127, 90),  (121, 85),  (115, 80),
                    (108, 78),  (101, 76),  (94,  74),  (87,  72),  (80,  70),
                    (73,  68),  (66,  66),  (59,  64),  (52,  62),  (45,  60),
                    (42,  50),  (39,  40),  (36,  30),  (33,  20),  (30,  10)
                ],
                '五年级': [
                    (148, 100), (143, 95),  (138, 90),  (132, 85),  (126, 80),
                    (119, 78),  (112, 76),  (105, 74),  (98,  72),  (91,  70),
                    (84,  68),  (77,  66),  (70,  64),  (63,  62),  (56,  60),
                    (53,  50),  (50,  40),  (47,  30),  (44,  20),  (41,  10)
                ],
                '六年级': [
                    (157, 100), (152, 95),  (147, 90),  (141, 85),  (135, 80),
                    (128, 78),  (121, 76),  (114, 74),  (107, 72),  (100, 70),
                    (93,  68),  (86,  66),  (79,  64),  (72,  62),  (65,  60),
                    (62,  50),  (59,  40),  (56,  30),  (53,  20),  (50,  10)
                ]
            },
            '女': {
                '一年级': [
                    (117, 100), (110, 95),  (103, 90),  (95,  85),  (87,  80),
                    (80,  78),  (73,  76),  (66,  74),  (59,  72),  (52,  70),
                    (45,  68),  (38,  66),  (31,  64),  (24,  62),  (17,  60),
                    (14,  50),  (11,  40),  (8,   30),  (5,   20),  (2,   10)
                ],
                '二年级': [
                    (127, 100), (120, 95),  (113, 90),  (105, 85),  (97,  80),
                    (90,  78),  (83,  76),  (76,  74),  (69,  72),  (62,  70),
                    (55,  68),  (48,  66),  (41,  64),  (34,  62),  (27,  60),
                    (24,  50),  (21,  40),  (18,  30),  (15,  20),  (12,  10)
                ],
                '三年级': [
                    (139, 100), (132, 95),  (125, 90),  (117, 85),  (109, 80),
                    (102, 78),  (95,  76),  (88,  74),  (81,  72),  (74,  70),
                    (67,  68),  (60,  66),  (53,  64),  (46,  62),  (39,  60),
                    (36,  50),  (33,  40),  (30,  30),  (27,  20),  (24,  10)
                ],
                '四年级': [
                    (149, 100), (142, 95),  (135, 90),  (127, 85),  (119, 80),
                    (112, 78),  (105, 76),  (98,  74),  (91,  72),  (84,  70),
                    (77,  68),  (70,  66),  (63,  64),  (56,  62),  (49,  60),
                    (46,  50),  (43,  40),  (40,  30),  (37,  20),  (34,  10)
                ],
                '五年级': [
                    (158, 100), (151, 95),  (144, 90),  (136, 85),  (128, 80),
                    (121, 78),  (114, 76),  (107, 74),  (100, 72),  (93,  70),
                    (86,  68),  (79,  66),  (72,  64),  (65,  62),  (58,  60),
                    (55,  50),  (52,  40),  (49,  30),  (46,  20),  (43,  10)
                ],
                '六年级': [
                    (166, 100), (159, 95),  (152, 90),  (144, 85),  (136, 80),
                    (129, 78),  (122, 76),  (115, 74),  (108, 72),  (101, 70),
                    (94,  68),  (87,  66),  (80,  64),  (73,  62),  (66,  60),
                    (63,  50),  (60,  40),  (57,  30),  (54,  20),  (51,  10)
                ]
            }
        }
        # 仰卧起坐评分标准（表1-13、1-14）
        self.situp_standards = {
            '男': {
                '三年级': [
                    (48, 100), (45, 95),  (42, 90),  (39, 85),  (36, 80),
                    (34, 78),  (32, 76),  (30, 74),  (28, 72),  (26, 70),
                    (24, 68),  (22, 66),  (20, 64),  (18, 62),  (16, 60),
                    (14, 50),  (12, 40),  (10, 30),  (8,  20),  (6,  10)
                ],
                '四年级': [
                    (49, 100), (46, 95),  (43, 90),  (40, 85),  (37, 80),
                    (35, 78),  (33, 76),  (31, 74),  (29, 72),  (27, 70),
                    (25, 68),  (23, 66),  (21, 64),  (19, 62),  (17, 60),
                    (15, 50),  (13, 40),  (11, 30),  (9,  20),  (7,  10)
                ],
                '五年级': [
                    (50, 100), (47, 95),  (44, 90),  (41, 85),  (38, 80),
                    (36, 78),  (34, 76),  (32, 74),  (30, 72),  (28, 70),
                    (26, 68),  (24, 66),  (22, 64),  (20, 62),  (18, 60),
                    (16, 50),  (14, 40),  (12, 30),  (10, 20),  (8,  10)
                ],
                '六年级': [
                    (51, 100), (48, 95),  (45, 90),  (42, 85),  (39, 80),
                    (37, 78),  (35, 76),  (33, 74),  (31, 72),  (29, 70),
                    (27, 68),  (25, 66),  (23, 64),  (21, 62),  (19, 60),
                    (17, 50),  (15, 40),  (13, 30),  (11, 20),  (9,  10)
                ]
            },
            '女': {
                '三年级': [
                    (46, 100), (44, 95),  (42, 90),  (39, 85),  (36, 80),
                    (34, 78),  (32, 76),  (30, 74),  (28, 72),  (26, 70),
                    (24, 68),  (22, 66),  (20, 64),  (18, 62),  (16, 60),
                    (14, 50),  (12, 40),  (10, 30),  (8,  20),  (6,  10)
                ],
                '四年级': [
                    (47, 100), (45, 95),  (43, 90),  (40, 85),  (37, 80),
                    (35, 78),  (33, 76),  (31, 74),  (29, 72),  (27, 70),
                    (25, 68),  (23, 66),  (21, 64),  (19, 62),  (17, 60),
                    (15, 50),  (13, 40),  (11, 30),  (9,  20),  (7,  10)
                ],
                '五年级': [
                    (48, 100), (46, 95),  (44, 90),  (41, 85),  (38, 80),
                    (36, 78),  (34, 76),  (32, 74),  (30, 72),  (28, 70),
                    (26, 68),  (24, 66),  (22, 64),  (20, 62),  (18, 60),
                    (16, 50),  (14, 40),  (12, 30),  (10, 20),  (8,  10)
                ],
                '六年级': [
                    (49, 100), (47, 95),  (45, 90),  (42, 85),  (39, 80),
                    (37, 78),  (35, 76),  (33, 74),  (31, 72),  (29, 70),
                    (27, 68),  (25, 66),  (23, 64),  (21, 62),  (19, 60),
                    (17, 50),  (15, 40),  (13, 30),  (11, 20),  (9,  10)
                ]
            }
        }
        # 50米×8往返跑评分标准（表1-15、1-16）- 时间转换为秒数，越少分数越高
        self.run8_standards = {
            '男': {
                '五年级': [
                    (96,  100), (99,  95),  (102, 90),  (105, 85),  (108, 80),
                    (111, 78),  (114, 76),  (117, 74),  (120, 72),  (123, 70),
                    (126, 68),  (129, 66),  (132, 64),  (135, 62),  (138, 60),
                    (142, 50),  (146, 40),  (150, 30),  (154, 20),  (158, 10)
                ],
                '六年级': [
                    (90,  100), (93,  95),  (96,  90),  (99,  85),  (102, 80),
                    (105, 78),  (108, 76),  (111, 74),  (114, 72),  (117, 70),
                    (120, 68),  (123, 66),  (126, 64),  (129, 62),  (132, 60),
                    (136, 50),  (140, 40),  (144, 30),  (148, 20),  (152, 10)
                ]
            },
            '女': {
                '五年级': [
                    (101, 100), (104, 95),  (107, 90),  (110, 85),  (113, 80),
                    (116, 78),  (119, 76),  (122, 74),  (125, 72),  (128, 70),
                    (131, 68),  (134, 66),  (137, 64),  (140, 62),  (143, 60),
                    (147, 50),  (151, 40),  (155, 30),  (159, 20),  (163, 10)
                ],
                '六年级': [
                    (97,  100), (100, 95),  (103, 90),  (106, 85),  (109, 80),
                    (112, 78),  (115, 76),  (118, 74),  (121, 72),  (124, 70),
                    (127, 68),  (130, 66),  (133, 64),  (136, 62),  (139, 60),
                    (143, 50),  (147, 40),  (151, 30),  (155, 20),  (159, 10)
                ]
            }
        }
    
    def get_score_from_table(self, value, standards_table, reverse=False):
        """根据评分表获取分数"""
        if pd.isna(value):
            return np.nan
        
        for threshold, score in standards_table:
            if reverse:  # 对于时间类项目，数值越小分数越高
                if value <= threshold:
                    return score
            else:  # 对于其他项目，数值越大分数越高
                if value >= threshold:
                    return score
        
        # 如果都不满足，返回最低分
        return standards_table[-1][1]
    
    def get_bmi_score_and_grade(self, bmi, gender, grade):
        """获取BMI分数和等级"""
        if pd.isna(bmi) or grade not in self.bmi_standards.get(gender, {}):
            return np.nan, '未测'
        
        standards = self.bmi_standards[gender][grade]
        
        if standards['正常'][0] <= bmi <= standards['正常'][1]:
            return 100, '正常'
        elif bmi <= standards['低体重'][1]:
            return 80, '低体重'
        elif standards['超重'][0] <= bmi <= standards['超重'][1]:
            return 80, '超重'
        elif bmi >= standards['肥胖'][0]:
            return 60, '肥胖'
        else:
            return 80, '正常'  # 默认
    
    def calculate_bmi(self, height_cm, weight_kg):
        """计算BMI"""
        if pd.isna(height_cm) or pd.isna(weight_kg) or height_cm <= 0 or weight_kg <= 0:
            return np.nan
        height_m = height_cm / 100
        return round(weight_kg / (height_m * height_m), 1)
    
    def extract_grade_from_class(self, class_name):
        """从班级名称中提取年级"""
        if '六年级' in class_name:
            return '六年级'
        elif '五年级' in class_name:
            return '五年级'
        elif '四年级' in class_name:
            return '四年级'
        elif '三年级' in class_name:
            return '三年级'
        elif '二年级' in class_name:
            return '二年级'
        elif '一年级' in class_name:
            return '一年级'
        else:
            return '未知年级'
    
    def convert_time_to_seconds(self, time_str):
        """将时间字符串转换为秒数"""
        if pd.isna(time_str):
            return np.nan
        
        try:
            # 处理可能的时间格式
            time_str = str(time_str).strip()
            if ':' in time_str:
                parts = time_str.split(':')
                minutes = float(parts[0])
                seconds = float(parts[1])
                return minutes * 60 + seconds
            else:
                return float(time_str)
        except:
            return np.nan
    
    def calculate_all_scores_by_standards(self, df):
        """根据国家标准计算所有项目得分"""
        print("根据国家标准计算各项目得分...")
        
        # 计算BMI
        df['BMI'] = df.apply(lambda row: self.calculate_bmi(row['身高(cm)'], row['体重(kg)']), axis=1)
        
        # 如果已有年级列，直接使用；否则从班级名称提取
        if '年级' not in df.columns:
            df['年级'] = df['班级名称'].apply(self.extract_grade_from_class)
        else:
            # 年级列已存在，确保数据一致性
            pass
        
        # 初始化得分和等级列
        df['BMI得分'] = np.nan
        df['BMI等级'] = '未测'
        df['肺活量得分'] = np.nan
        df['肺活量等级'] = '未测'
        df['50米跑得分'] = np.nan
        df['50米跑等级'] = '未测'
        df['坐位体前屈得分'] = np.nan
        df['坐位体前屈等级'] = '未测'
        df['跳绳得分'] = np.nan
        df['跳绳等级'] = '未测'
        df['仰卧起坐得分'] = np.nan
        df['仰卧起坐等级'] = '未测'
        df['往返跑得分'] = np.nan
        df['往返跑等级'] = '未测'
        df['附加分'] = 0
        
        # 按年级和性别分组计算 - 只处理四年级和六年级
        for grade in ['四年级', '六年级']:
            for gender in ['男', '女']:
                mask = (df['年级'] == grade) & (df['性别'] == gender)
                if not mask.any():
                    continue
                
                print(f"计算{grade}{gender}学生得分...")
                
                # BMI评分
                for idx in df[mask].index:
                    bmi = df.loc[idx, 'BMI']
                    score, grade_level = self.get_bmi_score_and_grade(bmi, gender, grade)
                    df.loc[idx, 'BMI得分'] = score
                    df.loc[idx, 'BMI等级'] = grade_level
                
                # 肺活量评分
                if gender in self.lung_standards and grade in self.lung_standards[gender]:
                    standards = self.lung_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, '肺活量(ml)']
                        score = self.get_score_from_table(value, standards, reverse=False)
                        df.loc[idx, '肺活量得分'] = score
                        df.loc[idx, '肺活量等级'] = self.get_grade_from_score(score)
                
                # 50米跑评分
                if gender in self.run50_standards and grade in self.run50_standards[gender]:
                    standards = self.run50_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, '50米跑(s)']
                        # 数据有效性检查：如果为空值，得分留空，等级为'未测'
                        if pd.isna(value):
                            score = np.nan
                            grade_level = '未测'
                        elif value <= 0 or value > 60:
                            score = 0  # 无效数据给0分
                            grade_level = self.get_grade_from_score(score)
                        else:
                            score = self.get_score_from_table(value, standards, reverse=True)
                            grade_level = self.get_grade_from_score(score)
                        df.loc[idx, '50米跑得分'] = score
                        df.loc[idx, '50米跑等级'] = grade_level
                
                # 坐位体前屈评分
                if gender in self.sitreach_standards and grade in self.sitreach_standards[gender]:
                    standards = self.sitreach_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, '坐位体前屈(cm)']
                        score = self.get_score_from_table(value, standards, reverse=False)
                        df.loc[idx, '坐位体前屈得分'] = score
                        df.loc[idx, '坐位体前屈等级'] = self.get_grade_from_score(score)
                
                # 跳绳评分
                if gender in self.rope_standards and grade in self.rope_standards[gender]:
                    standards = self.rope_standards[gender][grade]
                    for idx in df[mask].index:
                        value = df.loc[idx, '一分钟跳绳(个）']
                        score = self.get_score_from_table(value, standards, reverse=False)
                        df.loc[idx, '跳绳得分'] = score
                        df.loc[idx, '跳绳等级'] = self.get_grade_from_score(score)
                        
                        # 计算跳绳加分（小学跳绳为加分项目）
                        if pd.notna(score) and score == 100:
                            # 如果达到100分，计算超出部分的加分
                            max_standard = standards[0][0]  # 100分对应的次数
                            if pd.notna(value) and value > max_standard:
                                # 按照加分表计算，每超出一定次数给对应加分
                                extra_count = value - max_standard
                                # 跳绳加分标准（根据国家标准）
                                # 跳绳加分：每超出2个给1分，最高20分
                                bonus_score = min(20, extra_count // 2)
                                df.loc[idx, '附加分'] = bonus_score
                
                # 仰卧起坐评分（三年级及以上）
                if grade in ['三年级', '四年级', '五年级', '六年级']:
                    if gender in self.situp_standards and grade in self.situp_standards[gender]:
                        standards = self.situp_standards[gender][grade]
                        for idx in df[mask].index:
                            value = df.loc[idx, '一分钟仰卧起坐(个)']
                            score = self.get_score_from_table(value, standards, reverse=False)
                            df.loc[idx, '仰卧起坐得分'] = score
                            df.loc[idx, '仰卧起坐等级'] = self.get_grade_from_score(score)
                
                # 50米×8往返跑评分（五六年级）
                if grade in ['五年级', '六年级']:
                    if gender in self.run8_standards and grade in self.run8_standards[gender]:
                        standards = self.run8_standards[gender][grade]
                        for idx in df[mask].index:
                            value = df.loc[idx, '50米×8往返跑(s)']
                            if pd.notna(value):
                                # 如果是时间格式，转换为秒数
                                seconds = self.convert_time_to_seconds(value)
                                # 数据有效性检查：往返跑时间必须在合理范围内（30-300秒）
                                if pd.isna(seconds) or seconds <= 0 or seconds > 300:
                                    score = 0  # 无效数据给0分
                                else:
                                    score = self.get_score_from_table(seconds, standards, reverse=True)
                                df.loc[idx, '往返跑得分'] = score
                                df.loc[idx, '往返跑等级'] = self.get_grade_from_score(score)
    
    def get_grade_from_score(self, score):
        """根据分数获取等级"""
        if pd.isna(score):
            return '未测'
        elif score >= 90:
            return '优秀'
        elif score >= 80:
            return '良好'
        elif score >= 60:
            return '及格'
        else:
            return '不及格'
    
    def calculate_comprehensive_score(self, df):
        """根据国家标准权重计算综合得分"""
        print("计算综合得分...")
        
        df['标准分'] = 0
        
        for idx, row in df.iterrows():
            grade = row['年级']
            if grade not in self.weights:
                continue
                
            weights = self.weights[grade]
            total_score = 0
            
            # 根据年级计算加权总分
            if pd.notna(row['BMI得分']):
                total_score += row['BMI得分'] * weights.get('BMI', 0)
            
            if pd.notna(row['肺活量得分']):
                total_score += row['肺活量得分'] * weights.get('肺活量', 0)
            
            if pd.notna(row['50米跑得分']):
                total_score += row['50米跑得分'] * weights.get('50米跑', 0)
            
            if pd.notna(row['坐位体前屈得分']):
                total_score += row['坐位体前屈得分'] * weights.get('坐位体前屈', 0)
            
            if pd.notna(row['跳绳得分']):
                total_score += row['跳绳得分'] * weights.get('跳绳', 0)
            
            if grade in ['三年级', '四年级', '五年级', '六年级'] and pd.notna(row['仰卧起坐得分']):
                total_score += row['仰卧起坐得分'] * weights.get('仰卧起坐', 0)
            
            if grade in ['五年级', '六年级'] and pd.notna(row['往返跑得分']):
                total_score += row['往返跑得分'] * weights.get('往返跑', 0)
            
            df.loc[idx, '标准分'] = round(total_score, 1)
        
        # 综合得分 = 标准分 + 附加分
        df['综合得分'] = df['标准分'] + df['附加分']
        
        # 设置综合等级，如果所有测试项目都没有参与则为'未测'
        def get_comprehensive_grade(row):
            # 检查主要测试项目是否都为空（BMI、肺活量、50米跑、坐位体前屈、跳绳）
            main_scores = [
                row['BMI得分'], row['肺活量得分'], row['50米跑得分'], 
                row['坐位体前屈得分'], row['跳绳得分']
            ]
            # 对于三年级及以上还要检查仰卧起坐
            if row['年级'] in ['三年级', '四年级', '五年级', '六年级']:
                main_scores.append(row['仰卧起坐得分'])
            # 对于五六年级还要检查往返跑
            if row['年级'] in ['五年级', '六年级']:
                main_scores.append(row['往返跑得分'])
            
            # 如果所有主要项目都是空值，则为'未测'
            if all(pd.isna(score) for score in main_scores):
                return '未测'
            else:
                return self.get_grade_from_score(row['综合得分'])
        
        df['综合等级'] = df.apply(get_comprehensive_grade, axis=1)
    
    def calculate_statistics(self, df):
        """计算统计数据"""
        stats = {}
        
        # 基本统计
        stats['total_count'] = len(df)
        stats['male_count'] = len(df[df['性别'] == '男'])
        stats['female_count'] = len(df[df['性别'] == '女'])
        
        # 实查人数（有综合等级且不为'未测'的学生）
        tested_students = df[df['综合等级'] != '未测']
        stats['tested_total'] = len(tested_students)
        stats['tested_male'] = len(tested_students[tested_students['性别'] == '男'])
        stats['tested_female'] = len(tested_students[tested_students['性别'] == '女'])
        
        # 计算实查比率
        stats['total_ratio'] = f"{stats['tested_total']/stats['total_count']*100:.1f}%"
        stats['male_ratio'] = f"{stats['tested_male']/stats['male_count']*100:.1f}%" if stats['male_count'] > 0 else "0%"
        stats['female_ratio'] = f"{stats['tested_female']/stats['female_count']*100:.1f}%" if stats['female_count'] > 0 else "0%"
        
        # 综合等级统计（只统计实际参与测试的学生，排除'未测'）
        tested_grade_counts = tested_students['综合等级'].value_counts()
        stats['excellent_total'] = tested_grade_counts.get('优秀', 0)
        stats['good_total'] = tested_grade_counts.get('良好', 0)
        stats['pass_total'] = tested_grade_counts.get('及格', 0)
        stats['fail_total'] = tested_grade_counts.get('不及格', 0)
        
        # 分性别统计综合等级（只统计实际参与测试的学生）
        tested_male = tested_students[tested_students['性别'] == '男']
        tested_female = tested_students[tested_students['性别'] == '女']
        male_grades = tested_male['综合等级'].value_counts()
        female_grades = tested_female['综合等级'].value_counts()
        
        stats['excellent_male'] = male_grades.get('优秀', 0)
        stats['excellent_female'] = female_grades.get('优秀', 0)
        stats['good_male'] = male_grades.get('良好', 0)
        stats['good_female'] = female_grades.get('良好', 0)
        stats['pass_male'] = male_grades.get('及格', 0)
        stats['pass_female'] = female_grades.get('及格', 0)
        stats['fail_male'] = male_grades.get('不及格', 0)
        stats['fail_female'] = female_grades.get('不及格', 0)
        
        # 各项目等级人数统计（根据各自得分计算）
        for project in ['BMI', '肺活量', '50米跑', '坐位体前屈', '跳绳', '仰卧起坐', '往返跑']:
            score_col = f'{project}得分'
            if score_col in df.columns:
                stats[f'{project}_excellent'] = len(df[(df[score_col] >= 90) & (df[score_col].notna())])
                stats[f'{project}_good'] = len(df[(df[score_col] >= 80) & (df[score_col] < 90) & (df[score_col].notna())])
                stats[f'{project}_pass'] = len(df[(df[score_col] >= 60) & (df[score_col] < 80) & (df[score_col].notna())])
                stats[f'{project}_fail'] = len(df[(df[score_col] < 60) & (df[score_col].notna())])
            else:
                stats[f'{project}_excellent'] = 0
                stats[f'{project}_good'] = 0
                stats[f'{project}_pass'] = 0
                stats[f'{project}_fail'] = 0
        
        # 计算百分比
        if stats['tested_total'] > 0:
            stats['excellent_ratio'] = f"{stats['excellent_total']/stats['tested_total']*100:.0f}%"
            stats['good_ratio'] = f"{stats['good_total']/stats['tested_total']*100:.0f}%"
            stats['pass_ratio'] = f"{stats['pass_total']/stats['tested_total']*100:.0f}%"
            stats['fail_ratio'] = f"{stats['fail_total']/stats['tested_total']*100:.0f}%"
        
        # 各项目实查人数统计
        stats['bmi_tested'] = len(df.dropna(subset=['BMI']))
        stats['lung_tested'] = len(df.dropna(subset=['肺活量(ml)']))
        stats['run50_tested'] = len(df.dropna(subset=['50米跑(s)']))
        stats['sitreach_tested'] = len(df.dropna(subset=['坐位体前屈(cm)']))
        stats['rope_tested'] = len(df.dropna(subset=['一分钟跳绳(个）']))
        stats['situp_tested'] = len(df.dropna(subset=['一分钟仰卧起坐(个)']))
        if '50米×8往返跑(s)' in df.columns:
            stats['run8_tested'] = len(df.dropna(subset=['50米×8往返跑(s)']))
        else:
            stats['run8_tested'] = 0
        
        return stats
    
    def convert_single_file_to_school_format(self, input_file, output_file):
        """将单个Excel文件转换为学校格式"""
        print("=== 开始转换Excel文件（基于国家标准）===")
        print("只处理四年级和六年级的数据")
        
        print(f"正在读取: {input_file}")
        
        try:
            df = pd.read_excel(input_file, sheet_name=0)
            print(f"读取到 {len(df)} 条数据")
            
            # 列名映射以适应新的Excel格式
            column_mapping = {
                '学籍号': '学号'
            }
            
            # 应用列名映射
            df = df.rename(columns=column_mapping)
            
            # 数据清理（只检查姓名）
            df_clean = df.dropna(subset=['姓名'])
            print(f"清理后剩余 {len(df_clean)} 条有效数据")
            
            # 添加年级信息并过滤只保留四年级和六年级
            df_clean['年级'] = df_clean['班级名称'].apply(self.extract_grade_from_class)
            target_grades = ['四年级', '六年级']
            df_clean = df_clean[df_clean['年级'].isin(target_grades)]
            print(f"过滤后剩余 {len(df_clean)} 条四年级和六年级数据")
            
            # 根据国家标准计算得分
            self.calculate_all_scores_by_standards(df_clean)
            
            # 计算综合得分
            self.calculate_comprehensive_score(df_clean)
            
            # 生成学校格式的Excel
            self.generate_school_format_excel(df_clean, output_file)
            
            print(f"转换完成，输出文件: {output_file}")
            
        except Exception as e:
            print(f"读取文件出错: {str(e)}")
            raise
    
    def generate_school_format_excel(self, df, output_file):
        """生成学校格式的Excel文件"""
        from openpyxl import Workbook
        from openpyxl.styles import Font, Alignment
        
        wb = Workbook()
        ws = wb.active
        ws.title = "小学"
        
        # 计算统计数据
        stats = self.calculate_statistics(df)
        
        # 添加表头信息（前7行）
        self.add_header_info(ws, stats)
        
        # 添加学生数据表头（第8行）
        self.add_student_data_header(ws)
        
        # 添加学生数据（从第9行开始）
        self.add_student_data(ws, df)
        
        # 应用格式化
        self.apply_formatting(ws)
        
        # 保存文件
        wb.save(output_file)
    
    def add_header_info(self, ws, stats):
        """添加前7行的统计信息"""
        # 第1行：基本信息
        ws['A1'] = '单位名称：'
        ws['B1'] = '平谷区第十一小学学生体质健康测试成绩（校内）'
        ws['F1'] = '体质测定日期：'
        ws['G1'] = '2025/09/23-2025/09/24'
        ws['K1'] = '各单项实查评价人数统计'
        ws['L1'] = '等级'
        ws['N1'] = '评分a'
        ws['P1'] = '体重指数（BMI）'
        ws['Q1'] = '肺活量'
        ws['R1'] = '50米跑'
        ws['S1'] = '坐位体前屈'
        ws['T1'] = '一分钟跳绳'
        ws['U1'] = '一分钟仰卧起坐'
        ws['V1'] = '50米×8往返跑'
        ws['W1'] = '综合等级'
        
        # 第2行：性别分类和等级说明
        ws['B2'] = '男'
        ws['C2'] = '女'
        ws['D2'] = '总人数'
        ws['E2'] = '综合等级'
        ws['F2'] = '评分a'
        ws['G2'] = '男'
        ws['H2'] = '女'
        ws['I2'] = '合计'
        ws['J2'] = '占比率%'
        ws['L2'] = '一级（优秀）'
        ws['N2'] = 'a ≥ 90.0 分'
        ws['P2'] = stats['BMI_excellent']
        ws['Q2'] = stats['肺活量_excellent'] 
        ws['R2'] = stats['50米跑_excellent']
        ws['S2'] = stats['坐位体前屈_excellent']
        ws['T2'] = stats['跳绳_excellent']
        ws['U2'] = stats['仰卧起坐_excellent']
        ws['V2'] = stats['往返跑_excellent']
        ws['W2'] = stats['excellent_total']
        
        # 第3行：应查人数
        ws['A3'] = '应查人数'
        ws['B3'] = stats['male_count']
        ws['C3'] = stats['female_count']
        ws['D3'] = stats['total_count']
        ws['E3'] = '一级（优秀）'
        ws['F3'] = 'a ≥ 90.0 分'
        ws['G3'] = stats['excellent_male']
        ws['H3'] = stats['excellent_female']
        ws['I3'] = stats['excellent_total']
        ws['J3'] = stats.get('excellent_ratio', '0%')
        ws['L3'] = '二级（良好）'
        ws['N3'] = '80.0 分≤a< 90.0分'
        ws['P3'] = stats['BMI_good']
        ws['Q3'] = stats['肺活量_good']
        ws['R3'] = stats['50米跑_good']
        ws['S3'] = stats['坐位体前屈_good']
        ws['T3'] = stats['跳绳_good']
        ws['U3'] = stats['仰卧起坐_good']
        ws['V3'] = stats['往返跑_good']
        ws['W3'] = stats['good_total']
        
        # 第4行：实查人数
        ws['A4'] = '实查人数'
        ws['B4'] = stats['tested_male']
        ws['C4'] = stats['tested_female']
        ws['D4'] = stats['tested_total']
        ws['E4'] = '二级（良好）'
        ws['F4'] = '80.0 分≤a< 90.0分'
        ws['G4'] = stats['good_male']
        ws['H4'] = stats['good_female']
        ws['I4'] = stats['good_total']
        ws['J4'] = stats.get('good_ratio', '0%')
        ws['L4'] = '三级（及格）'
        ws['N4'] = '60.0 分≤a< 80.0分'
        ws['P4'] = stats['BMI_pass']
        ws['Q4'] = stats['肺活量_pass']
        ws['R4'] = stats['50米跑_pass']
        ws['S4'] = stats['坐位体前屈_pass']
        ws['T4'] = stats['跳绳_pass']
        ws['U4'] = stats['仰卧起坐_pass']
        ws['V4'] = stats['往返跑_pass']
        ws['W4'] = stats['pass_total']
        
        # 第5行：实查比率
        ws['A5'] = '实查比率%'
        ws['B5'] = stats['male_ratio']
        ws['C5'] = stats['female_ratio']
        ws['D5'] = stats['total_ratio']
        ws['E5'] = '三级（及格）'
        ws['F5'] = '60.0 分≤a< 80.0分'
        ws['G5'] = stats['pass_male']
        ws['H5'] = stats['pass_female']
        ws['I5'] = stats['pass_total']
        ws['J5'] = stats.get('pass_ratio', '0%')
        ws['L5'] = '四级（不及格）'
        ws['N5'] = 'a < 60.0 分'
        ws['P5'] = stats['BMI_fail']
        ws['Q5'] = stats['肺活量_fail']
        ws['R5'] = stats['50米跑_fail']
        ws['S5'] = stats['坐位体前屈_fail']
        ws['T5'] = stats['跳绳_fail']
        ws['U5'] = stats['仰卧起坐_fail']
        ws['V5'] = stats['往返跑_fail']
        ws['W5'] = stats['fail_total']
        
        # 第6行
        ws['E6'] = '四级（不及格）'
        ws['F6'] = 'a < 60.0 分'
        ws['G6'] = stats['fail_male']
        ws['H6'] = stats['fail_female']
        ws['I6'] = stats['fail_total']
        ws['J6'] = stats.get('fail_ratio', '0%')
        ws['L6'] = '单项实查人数合计'
        ws['P6'] = stats['bmi_tested']
        ws['Q6'] = stats['lung_tested']
        ws['R6'] = stats['run50_tested']
        ws['S6'] = stats['sitreach_tested']
        ws['T6'] = stats['rope_tested']
        ws['U6'] = stats['situp_tested']
        ws['V6'] = stats['run8_tested']
        ws['W6'] = stats['tested_total']
        
        # 第7行留空
    
    def add_student_data_header(self, ws):
        """添加第8行学生数据表头"""
        headers = [
            '年级编号', '班名', '学号', '姓名', '性别',
            '身高（cm)', '体重（kg)', '体重指数BMI\n（千克/米2）', '得分', '等级',
            '肺活量（毫升）', '得分', '等级',
            '50米跑（秒）', '得分', '等级',
            '坐位体前屈(cm)', '得分', '等级',
            '一分钟跳绳（次）', '得分', '加分', '等级',
            '一分钟仰卧起坐（次）', '得分', '等级',
            '50米*8往返跑（分.秒）', '得分', '等级',
            '标准分', '附加分', '综合得分', '综合评级', '备注'
        ]
        
        for col, header in enumerate(headers, 1):
            ws.cell(row=8, column=col, value=header)
    
    def add_student_data(self, ws, df):
        """添加学生数据（从第9行开始）"""
        # 定义年级排序顺序
        grade_order = ['一年级', '二年级', '三年级', '四年级', '五年级', '六年级']
        df['年级排序'] = df['年级'].apply(lambda x: grade_order.index(x) if x in grade_order else 99)
        
        # 提取班号并转换班名格式
        def extract_class_number_and_format(class_name, grade):
            """提取班号并格式化班名"""
            import re
            # 从班级名称中提取班号（如"四年级1班" -> 1, "六年级10班" -> 10）
            match = re.search(r'(\d+)班', class_name)
            if match:
                class_num = int(match.group(1))
                # 转换年级名为数字
                grade_map = {'一年级': '一', '二年级': '二', '三年级': '三', 
                           '四年级': '四', '五年级': '五', '六年级': '六'}
                grade_short = grade_map.get(grade, grade)
                formatted_name = f"{grade_short}{class_num}班"
                return class_num, formatted_name
            return 99, class_name  # 默认值
        
        df[['班号', '格式化班名']] = df.apply(
            lambda row: pd.Series(extract_class_number_and_format(row['班级名称'], row['年级'])), 
            axis=1
        )
        
        # 按年级、班号、学号排序（从小到大）
        df_sorted = df.sort_values(['年级排序', '班号', '学号']).reset_index(drop=True)
        
        for idx, row in df_sorted.iterrows():
            row_num = idx + 9
            
            # 基本信息
            ws.cell(row=row_num, column=1, value=row['年级'])
            ws.cell(row=row_num, column=2, value=row['格式化班名'])
            ws.cell(row=row_num, column=3, value=row['学号'])
            ws.cell(row=row_num, column=4, value=row['姓名'])
            ws.cell(row=row_num, column=5, value=row['性别'])
            
            # 身高体重BMI
            ws.cell(row=row_num, column=6, value=row['身高(cm)'])
            ws.cell(row=row_num, column=7, value=row['体重(kg)'])
            ws.cell(row=row_num, column=8, value=row['BMI'])
            ws.cell(row=row_num, column=9, value=row['BMI得分'])
            ws.cell(row=row_num, column=10, value=row['BMI等级'])
            
            # 肺活量
            ws.cell(row=row_num, column=11, value=row['肺活量(ml)'])
            ws.cell(row=row_num, column=12, value=row['肺活量得分'])
            ws.cell(row=row_num, column=13, value=row['肺活量等级'])
            
            # 50米跑
            ws.cell(row=row_num, column=14, value=row['50米跑(s)'])
            ws.cell(row=row_num, column=15, value=row['50米跑得分'])
            ws.cell(row=row_num, column=16, value=row['50米跑等级'])
            
            # 坐位体前屈
            ws.cell(row=row_num, column=17, value=row['坐位体前屈(cm)'])
            ws.cell(row=row_num, column=18, value=row['坐位体前屈得分'])
            ws.cell(row=row_num, column=19, value=row['坐位体前屈等级'])
            
            # 跳绳
            ws.cell(row=row_num, column=20, value=row['一分钟跳绳(个）'])
            ws.cell(row=row_num, column=21, value=row['跳绳得分'])
            ws.cell(row=row_num, column=22, value=row['附加分'] if row['附加分'] > 0 else None)
            ws.cell(row=row_num, column=23, value=row['跳绳等级'])
            
            # 仰卧起坐
            ws.cell(row=row_num, column=24, value=row['一分钟仰卧起坐(个)'])
            ws.cell(row=row_num, column=25, value=row['仰卧起坐得分'])
            ws.cell(row=row_num, column=26, value=row['仰卧起坐等级'])
            
            # 50米×8往返跑
            if '50米×8往返跑(s)' in row.index:
                ws.cell(row=row_num, column=27, value=row['50米×8往返跑(s)'])
                ws.cell(row=row_num, column=28, value=row['往返跑得分'])
                ws.cell(row=row_num, column=29, value=row['往返跑等级'])
            
            # 综合得分
            ws.cell(row=row_num, column=30, value=row['标准分'])
            ws.cell(row=row_num, column=31, value=row['附加分'])
            ws.cell(row=row_num, column=32, value=row['综合得分'])
            ws.cell(row=row_num, column=33, value=row['综合等级'])
            ws.cell(row=row_num, column=34, value='')  # 备注
    
    def apply_formatting(self, ws):
        """应用Excel格式化"""
        from openpyxl.styles import Font, Alignment
        
        # 合并单元格
        # 第1行BCDE合并
        ws.merge_cells('B1:E1')
        # 第1行GH合并
        ws.merge_cells('G1:H1')
        
        # 第K栏(第11列)第1到6行合并
        ws.merge_cells('K1:K6')

        
        # 设置第1到6行全部居中和粗体
        center_alignment = Alignment(horizontal='center', vertical='center')
        bold_font = Font(bold=True)
        
        for row in range(1, 7):
            for col in range(1, 35):  # 假设有34列
                cell = ws.cell(row=row, column=col)
                cell.alignment = center_alignment
                cell.font = bold_font
        
        # 设置列宽
        column_widths = {
            'A': 11, 'B': 19, 'C': 9, 'D': 9, 'E': 15, 'F': 19, 'G': 10, 'H': 24, 
            'I': 10, 'J': 10, 'K': 24, 'L': 18, 'M': 10, 'N': 21, 'O': 10, 'P': 17,
            'Q': 10, 'R': 10, 'S': 11, 'T': 17, 'U': 17, 'V': 17, 'W': 10, 'X': 21,
            'Y': 10, 'Z': 10, 'AA': 22, 'AB': 10, 'AC': 10, 'AD': 10, 'AE': 10
        }
        
        for col_letter, width in column_widths.items():
            ws.column_dimensions[col_letter].width = width

def main():
    """主函数"""
    import os
    
    converter = NationalStandardConverter()
    
    # 创建输出文件夹
    output_dir = "25年9月体测成绩得分等级汇总"
    os.makedirs(output_dir, exist_ok=True)
    
    # 输入和输出文件
    input_file = "2025年09月23日-2025年09月24日 成绩_含学号.xlsx"
    output_file = os.path.join(output_dir, "全校学生体质健康测试成绩总表.xlsx")
    
    # 转换单个Excel文件为总表
    try:
        converter.convert_single_file_to_school_format(input_file, output_file)
        print(f"✓ 成功生成全校总表: {output_file}")
    except Exception as e:
        print(f"✗ 转换失败, 错误: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
